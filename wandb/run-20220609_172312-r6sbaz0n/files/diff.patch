diff --git a/checkpoint/checkpoint.pth b/checkpoint/checkpoint.pth
index 137c993..825f29a 100644
Binary files a/checkpoint/checkpoint.pth and b/checkpoint/checkpoint.pth differ
diff --git a/checkpoint/stats.txt b/checkpoint/stats.txt
index 4df972f..abe8e57 100644
--- a/checkpoint/stats.txt
+++ b/checkpoint/stats.txt
@@ -117,3 +117,40 @@ train.py
 {"epoch": 0, "step": 200, "loss": 7.550258636474609, "time": 266}
 {"epoch": 0, "step": 205, "loss": 7.622440814971924, "time": 273}
 {"epoch": 0, "step": 210, "loss": 7.701798439025879, "time": 280}
+train.py
+{"epoch": 0, "step": 0, "loss": 7.553865909576416, "time": 0}
+{"epoch": 0, "step": 5, "loss": 7.5958476066589355, "time": 6}
+{"epoch": 0, "step": 10, "loss": 7.531919956207275, "time": 13}
+{"epoch": 0, "step": 15, "loss": 7.591022968292236, "time": 19}
+{"epoch": 0, "step": 20, "loss": 7.462124347686768, "time": 25}
+{"epoch": 0, "step": 25, "loss": 7.489391326904297, "time": 32}
+{"epoch": 0, "step": 30, "loss": 7.4988694190979, "time": 39}
+{"epoch": 0, "step": 35, "loss": 7.56967830657959, "time": 45}
+{"epoch": 0, "step": 40, "loss": 7.599825859069824, "time": 52}
+{"epoch": 0, "step": 45, "loss": 7.472693920135498, "time": 58}
+{"epoch": 0, "step": 50, "loss": 7.516973972320557, "time": 64}
+{"epoch": 0, "step": 55, "loss": 7.453164100646973, "time": 71}
+{"epoch": 0, "step": 60, "loss": 7.584528923034668, "time": 77}
+{"epoch": 0, "step": 65, "loss": 7.567092418670654, "time": 84}
+{"epoch": 0, "step": 70, "loss": 7.627830505371094, "time": 91}
+{"epoch": 0, "step": 75, "loss": 7.57837438583374, "time": 97}
+{"epoch": 0, "step": 80, "loss": 7.5802507400512695, "time": 103}
+{"epoch": 0, "step": 85, "loss": 7.51731014251709, "time": 110}
+{"epoch": 0, "step": 90, "loss": 7.476049423217773, "time": 116}
+{"epoch": 0, "step": 95, "loss": 7.497921943664551, "time": 122}
+{"epoch": 0, "step": 100, "loss": 7.631317138671875, "time": 129}
+{"epoch": 0, "step": 105, "loss": 7.568572998046875, "time": 135}
+{"epoch": 0, "step": 110, "loss": 7.682725429534912, "time": 141}
+{"epoch": 0, "step": 115, "loss": 7.503177642822266, "time": 148}
+{"epoch": 0, "step": 120, "loss": 7.51187801361084, "time": 154}
+{"epoch": 0, "step": 125, "loss": 7.575509548187256, "time": 160}
+{"epoch": 0, "step": 130, "loss": 7.435646057128906, "time": 167}
+{"epoch": 0, "step": 135, "loss": 7.548572540283203, "time": 173}
+{"epoch": 0, "step": 140, "loss": 7.567778587341309, "time": 180}
+{"epoch": 0, "step": 145, "loss": 7.51542854309082, "time": 186}
+{"epoch": 0, "step": 150, "loss": 7.54081916809082, "time": 192}
+{"epoch": 0, "step": 155, "loss": 7.511966228485107, "time": 199}
+{"epoch": 0, "step": 160, "loss": 7.537336826324463, "time": 205}
+{"epoch": 0, "step": 165, "loss": 7.547874450683594, "time": 212}
+{"epoch": 0, "step": 170, "loss": 7.543036460876465, "time": 219}
+train.py
diff --git a/datasets/__pycache__/coco.cpython-39.pyc b/datasets/__pycache__/coco.cpython-39.pyc
index 89bd2d9..3937985 100644
Binary files a/datasets/__pycache__/coco.cpython-39.pyc and b/datasets/__pycache__/coco.cpython-39.pyc differ
diff --git a/datasets/__pycache__/gqa_tweaked.cpython-39.pyc b/datasets/__pycache__/gqa_tweaked.cpython-39.pyc
index 08b5c8e..6b4eb09 100644
Binary files a/datasets/__pycache__/gqa_tweaked.cpython-39.pyc and b/datasets/__pycache__/gqa_tweaked.cpython-39.pyc differ
diff --git a/datasets/coco.py b/datasets/coco.py
index 7f53ba4..1a3918c 100644
--- a/datasets/coco.py
+++ b/datasets/coco.py
@@ -235,7 +235,7 @@ def make_coco_transforms(image_set, cautious):
             #         ),
             #     ),
                 # T.RandomResize([800], max_size=800), 
-                #T.Resize_orig([600, 600]),
+                T.Resize_orig([224, 224]),
                 T.CLIP_transf(processor), 
                 normalize,
              ]
diff --git a/model/__pycache__/img_encoder.cpython-39.pyc b/model/__pycache__/img_encoder.cpython-39.pyc
index 731d7f1..7eba53a 100644
Binary files a/model/__pycache__/img_encoder.cpython-39.pyc and b/model/__pycache__/img_encoder.cpython-39.pyc differ
diff --git a/model/__pycache__/model.cpython-39.pyc b/model/__pycache__/model.cpython-39.pyc
index 44c3df1..18f31fa 100644
Binary files a/model/__pycache__/model.cpython-39.pyc and b/model/__pycache__/model.cpython-39.pyc differ
diff --git a/model/__pycache__/text_encoder.cpython-39.pyc b/model/__pycache__/text_encoder.cpython-39.pyc
index 9496f9d..556589e 100644
Binary files a/model/__pycache__/text_encoder.cpython-39.pyc and b/model/__pycache__/text_encoder.cpython-39.pyc differ
diff --git a/model/model.py b/model/model.py
index 6a44606..ce8fb8d 100644
--- a/model/model.py
+++ b/model/model.py
@@ -84,7 +84,7 @@ class SlotVQA(nn.Module):
         cls_tok = torch.ones((img_slots.shape[0], self.transf_dim), dtype=torch.float).to(self.device) 
         #cls_tok.shape = batch_size, transf_dim
         cls_tok = self.learnable_cls(cls_tok)        
-        print(cls_tok.shape) 
+        # print(cls_tok.shape) 
         comb_slots = torch.cat((cls_tok.unsqueeze(1), comb_slots), dim=1) 
         #comb_slots.shape = batch, num_slots_text + num_slots_img + 1, slot_dim
 
diff --git a/model/text_encoder.py b/model/text_encoder.py
index 7f175eb..c9cbefe 100644
--- a/model/text_encoder.py
+++ b/model/text_encoder.py
@@ -38,12 +38,12 @@ class SlotText(nn.Module):
         device = next(self.slot_attention_module.parameters()).device 
         mask = torch.ones(inp.shape).to(device).masked_fill(inp==pad_id, 0)
         mask = mask.squeeze(-1).unsqueeze(1)
-        print(f'mask.shape={mask.shape}')
+        # print(f'mask.shape={mask.shape}')
         if len(inp.shape)>2: 
             inp = inp.squeeze(-1)
-        print(f'inp.shape={inp.shape}')        
+        # print(f'inp.shape={inp.shape}')        
         x = self.mbert(inp)['last_hidden_state']#x.shape = B, seq_len, mbert_out_size
-        print(f'x.shape after mbert={x.shape}')
+        # print(f'x.shape after mbert={x.shape}')
         x = self.layernorm(self.mlp(x)) #x.shape = B, seq_len, mbert_out_size 
         slots = self.slot_attention_module(x, mask=mask)  
         
diff --git a/train.py b/train.py
index 5f9a702..066387a 100644
--- a/train.py
+++ b/train.py
@@ -63,11 +63,11 @@ parser.add_argument(
 parser.add_argument('--masks',action='store_true') 
 
 #training hyperparameters: 
-parser.add_argument('--epochs', default=10, type=int, metavar='N',
+parser.add_argument('--epochs', default=25, type=int, metavar='N',
                     help='number of total epochs to run')
 parser.add_argument('--imset', default='train', type=str, metavar='IS',
                     help='train, val or test set')
-parser.add_argument('--batch_size', default=16, type=int, metavar='n',
+parser.add_argument('--batch_size', default=64, type=int, metavar='n',
                     help='mini-batch size')
 parser.add_argument('--learning-rate', default=0.2, type=float, metavar='LR',
                     help='base learning rate')
@@ -89,23 +89,23 @@ parser.add_argument('--optimizer', default='adam', type=str, metavar='OP',
                     help='selecting optimizer')
 
 #slot-attention hyperparameters: 
-parser.add_argument('--simg', default=5, type=int, metavar='SI',
+parser.add_argument('--simg', default=10, type=int, metavar='SI',
                     help='number of slots for image modality')
-parser.add_argument('--itersimg', default=3, type=int, metavar='II',
+parser.add_argument('--itersimg', default=5, type=int, metavar='II',
                     help='numer of iterations for slot attention on images')
-parser.add_argument('--slotdimimg', default=128, type=int, metavar='SDI',
+parser.add_argument('--slotdimimg', default=512, type=int, metavar='SDI',
                     help='dimension of slots for images')
-parser.add_argument('--stext', default=5, type=int, metavar='ST',
+parser.add_argument('--stext', default=7, type=int, metavar='ST',
                     help='number of slots for text modality')
-parser.add_argument('--iterstext', default=3, type=int, metavar='IT',
+parser.add_argument('--iterstext', default=5, type=int, metavar='IT',
                     help='number of iterations for slot attention on text')
-parser.add_argument('--slotdimtext', default=128, type=int, metavar='IT',
+parser.add_argument('--slotdimtext', default=512, type=int, metavar='IT',
                     help='number of iterations for slot attention on text')
 
 #transformer encoder hyperparameters: 
 parser.add_argument('--nhead', default=8, type=int, metavar='NH',
                     help='number of heads in transformer')
-parser.add_argument('--tdim', default=128, type=int, metavar='D',
+parser.add_argument('--tdim', default=512, type=int, metavar='D',
                     help='dimension of transformer')
 parser.add_argument('--nlayers', default=3, type=int, metavar='NL',
                     help='number of layers in transformer')
@@ -243,20 +243,20 @@ def main_worker(gpu, args):
 
             epoch_loss+=loss.item()
 
-            if args.rank==0: 
-                wandb.log({"epoch_loss": epoch_loss/counter})
-                if step%args.print_freq==0: 
-                    stats = dict(epoch=epoch, step=step, 
-                                loss=loss.item(), 
-                                time=int(time.time() - start_time))            
-
-                    print(json.dumps(stats))
-                    print(json.dumps(stats), file=stats_file)
-                
-                state = dict(epoch=epoch + 1, model=model.module.state_dict(),
-                            optimizer=optimizer.state_dict())
-                torch.save(state, args.checkpoint_dir / 'checkpoint.pth')
-                print('Model saved in', args.checkpoint_dir)
+        if args.rank==0: 
+            wandb.log({"epoch_loss": epoch_loss/counter})
+            if step%args.print_freq==0: 
+                stats = dict(epoch=epoch, step=step, 
+                            loss=loss.item(), 
+                            time=int(time.time() - start_time))            
+
+                print(json.dumps(stats))
+                print(json.dumps(stats), file=stats_file)
+            
+            state = dict(epoch=epoch + 1, model=model.module.state_dict(),
+                        optimizer=optimizer.state_dict())
+            torch.save(state, args.checkpoint_dir / 'checkpoint.pth')
+            print('Model saved in', args.checkpoint_dir)
             
 if __name__ == '__main__': 
     main()
diff --git a/wandb/debug-internal.log b/wandb/debug-internal.log
index 55aae5d..ece92d2 120000
--- a/wandb/debug-internal.log
+++ b/wandb/debug-internal.log
@@ -1 +1 @@
-run-20220609_124410-4z9phrk2/logs/debug-internal.log
\ No newline at end of file
+run-20220609_172312-r6sbaz0n/logs/debug-internal.log
\ No newline at end of file
diff --git a/wandb/debug.log b/wandb/debug.log
index 75e5232..89e4ed6 120000
--- a/wandb/debug.log
+++ b/wandb/debug.log
@@ -1 +1 @@
-run-20220609_124410-4z9phrk2/logs/debug.log
\ No newline at end of file
+run-20220609_172312-r6sbaz0n/logs/debug.log
\ No newline at end of file
diff --git a/wandb/latest-run b/wandb/latest-run
index 17c9642..3aac7d9 120000
--- a/wandb/latest-run
+++ b/wandb/latest-run
@@ -1 +1 @@
-run-20220609_124410-4z9phrk2
\ No newline at end of file
+run-20220609_172312-r6sbaz0n
\ No newline at end of file
