
train.py
[34m[1mwandb[39m[22m: [33mWARNING[39m Calling wandb.run.save without any arguments is deprecated.Changes to attributes are automatically persisted.
ftfy or spacy is not installed using BERT BasicTokenizer instead of ftfy.
Some weights of the model checkpoint at openai/clip-vit-base-patch32 were not used when initializing CLIPTextModel: ['vision_model.encoder.layers.9.self_attn.v_proj.bias', 'vision_model.encoder.layers.8.layer_norm1.bias', 'vision_model.encoder.layers.10.mlp.fc1.bias', 'vision_model.encoder.layers.5.mlp.fc1.bias', 'vision_model.encoder.layers.11.self_attn.q_proj.bias', 'text_projection.weight', 'vision_model.encoder.layers.1.mlp.fc2.bias', 'vision_model.encoder.layers.2.self_attn.k_proj.weight', 'vision_model.encoder.layers.8.layer_norm2.bias', 'vision_model.encoder.layers.5.self_attn.v_proj.bias', 'vision_model.encoder.layers.11.self_attn.k_proj.bias', 'vision_model.encoder.layers.3.layer_norm1.weight', 'vision_model.encoder.layers.11.mlp.fc1.weight', 'vision_model.encoder.layers.4.self_attn.v_proj.weight', 'vision_model.encoder.layers.0.self_attn.k_proj.bias', 'vision_model.encoder.layers.8.mlp.fc2.weight', 'vision_model.encoder.layers.5.mlp.fc1.weight', 'vision_model.encoder.layers.4.self_attn.out_proj.weight', 'vision_model.encoder.layers.3.layer_norm2.weight', 'vision_model.encoder.layers.2.layer_norm2.weight', 'vision_model.encoder.layers.2.self_attn.v_proj.bias', 'vision_model.encoder.layers.11.layer_norm2.weight', 'vision_model.pre_layrnorm.bias', 'vision_model.encoder.layers.1.layer_norm1.bias', 'vision_model.encoder.layers.1.self_attn.k_proj.weight', 'vision_model.encoder.layers.4.self_attn.out_proj.bias', 'logit_scale', 'vision_model.encoder.layers.1.self_attn.k_proj.bias', 'vision_model.encoder.layers.9.layer_norm1.bias', 'vision_model.pre_layrnorm.weight', 'vision_model.encoder.layers.11.self_attn.v_proj.bias', 'vision_model.encoder.layers.5.self_attn.v_proj.weight', 'vision_model.encoder.layers.10.layer_norm2.bias', 'vision_model.encoder.layers.2.self_attn.k_proj.bias', 'vision_model.encoder.layers.9.mlp.fc1.bias', 'vision_model.encoder.layers.10.mlp.fc2.weight', 'vision_model.encoder.layers.10.layer_norm2.weight', 'vision_model.encoder.layers.1.mlp.fc1.bias', 'vision_model.encoder.layers.3.mlp.fc1.weight', 'vision_model.encoder.layers.9.mlp.fc2.weight', 'vision_model.encoder.layers.8.self_attn.out_proj.weight', 'vision_model.encoder.layers.5.layer_norm1.bias', 'vision_model.encoder.layers.0.mlp.fc1.weight', 'vision_model.encoder.layers.2.mlp.fc1.bias', 'vision_model.encoder.layers.11.mlp.fc1.bias', 'vision_model.encoder.layers.11.self_attn.k_proj.weight', 'vision_model.encoder.layers.11.self_attn.out_proj.weight', 'vision_model.encoder.layers.8.layer_norm1.weight', 'vision_model.encoder.layers.7.mlp.fc2.weight', 'vision_model.encoder.layers.7.layer_norm1.bias', 'vision_model.encoder.layers.5.layer_norm1.weight', 'vision_model.encoder.layers.3.self_attn.v_proj.bias', 'vision_model.encoder.layers.6.mlp.fc1.bias', 'vision_model.encoder.layers.6.self_attn.v_proj.weight', 'vision_model.encoder.layers.0.self_attn.k_proj.weight', 'vision_model.encoder.layers.6.layer_norm1.weight', 'vision_model.encoder.layers.8.self_attn.v_proj.bias', 'vision_model.encoder.layers.11.layer_norm1.bias', 'vision_model.encoder.layers.3.mlp.fc2.bias', 'vision_model.encoder.layers.5.self_attn.q_proj.weight', 'vision_model.encoder.layers.11.layer_norm1.weight', 'vision_model.encoder.layers.4.layer_norm2.bias', 'vision_model.encoder.layers.5.mlp.fc2.weight', 'vision_model.encoder.layers.4.mlp.fc1.weight', 'vision_model.encoder.layers.7.self_attn.q_proj.bias', 'vision_model.encoder.layers.6.layer_norm1.bias', 'vision_model.encoder.layers.3.self_attn.q_proj.bias', 'vision_model.encoder.layers.1.layer_norm1.weight', 'vision_model.encoder.layers.8.mlp.fc1.bias', 'vision_model.encoder.layers.2.self_attn.out_proj.weight', 'vision_model.encoder.layers.1.self_attn.out_proj.bias', 'vision_model.encoder.layers.7.self_attn.v_proj.bias', 'vision_model.encoder.layers.9.self_attn.v_proj.weight', 'vision_model.encoder.layers.0.self_attn.out_proj.weight', 'vision_model.encoder.layers.9.self_attn.q_proj.weight', 'vision_model.encoder.layers.11.mlp.fc2.weight', 'vision_model.encoder.layers.6.layer_norm2.weight', 'vision_model.encoder.layers.9.self_attn.q_proj.bias', 'vision_model.encoder.layers.3.self_attn.k_proj.bias', 'vision_model.encoder.layers.0.self_attn.q_proj.bias', 'vision_model.encoder.layers.4.self_attn.k_proj.weight', 'vision_model.encoder.layers.10.mlp.fc2.bias', 'vision_model.encoder.layers.6.self_attn.out_proj.weight', 'vision_model.encoder.layers.1.mlp.fc2.weight', 'vision_model.encoder.layers.2.self_attn.q_proj.weight', 'vision_model.encoder.layers.6.self_attn.q_proj.weight', 'vision_model.encoder.layers.10.mlp.fc1.weight', 'vision_model.encoder.layers.5.layer_norm2.weight', 'vision_model.encoder.layers.6.mlp.fc2.bias', 'vision_model.encoder.layers.9.self_attn.out_proj.bias', 'vision_model.encoder.layers.9.self_attn.k_proj.weight', 'vision_model.encoder.layers.5.self_attn.out_proj.weight', 'vision_model.encoder.layers.8.self_attn.k_proj.weight', 'vision_model.encoder.layers.1.self_attn.q_proj.weight', 'vision_model.encoder.layers.5.self_attn.k_proj.weight', 'vision_model.encoder.layers.8.self_attn.q_proj.weight', 'vision_model.encoder.layers.10.self_attn.v_proj.bias', 'vision_model.encoder.layers.7.layer_norm2.weight', 'vision_model.encoder.layers.2.layer_norm1.bias', 'vision_model.encoder.layers.10.self_attn.k_proj.bias', 'vision_model.encoder.layers.0.layer_norm2.weight', 'vision_model.encoder.layers.0.mlp.fc2.bias', 'vision_model.encoder.layers.2.self_attn.q_proj.bias', 'vision_model.encoder.layers.4.mlp.fc1.bias', 'vision_model.encoder.layers.8.self_attn.v_proj.weight', 'vision_model.encoder.layers.5.mlp.fc2.bias', 'vision_model.encoder.layers.1.self_attn.out_proj.weight', 'vision_model.encoder.layers.7.self_attn.out_proj.weight', 'vision_model.encoder.layers.9.mlp.fc2.bias', 'vision_model.encoder.layers.0.layer_norm1.bias', 'vision_model.encoder.layers.2.layer_norm2.bias', 'vision_model.encoder.layers.3.mlp.fc1.bias', 'vision_model.encoder.layers.8.self_attn.out_proj.bias', 'vision_model.encoder.layers.10.self_attn.v_proj.weight', 'vision_model.encoder.layers.7.layer_norm1.weight', 'vision_model.encoder.layers.7.mlp.fc1.bias', 'vision_model.post_layernorm.bias', 'vision_model.embeddings.class_embedding', 'vision_model.encoder.layers.4.mlp.fc2.weight', 'vision_model.encoder.layers.0.layer_norm1.weight', 'vision_model.encoder.layers.2.self_attn.out_proj.bias', 'vision_model.encoder.layers.10.self_attn.q_proj.weight', 'vision_model.encoder.layers.4.layer_norm1.bias', 'vision_model.encoder.layers.4.self_attn.v_proj.bias', 'vision_model.embeddings.patch_embedding.weight', 'vision_model.encoder.layers.1.layer_norm2.weight', 'vision_model.encoder.layers.3.self_attn.v_proj.weight', 'vision_model.encoder.layers.7.self_attn.k_proj.bias', 'vision_model.encoder.layers.7.self_attn.out_proj.bias', 'vision_model.encoder.layers.10.layer_norm1.bias', 'vision_model.encoder.layers.6.mlp.fc2.weight', 'vision_model.encoder.layers.11.mlp.fc2.bias', 'vision_model.encoder.layers.9.layer_norm2.bias', 'vision_model.encoder.layers.11.layer_norm2.bias', 'vision_model.encoder.layers.8.mlp.fc1.weight', 'vision_model.encoder.layers.11.self_attn.v_proj.weight', 'vision_model.embeddings.position_embedding.weight', 'vision_model.encoder.layers.10.self_attn.q_proj.bias', 'vision_model.encoder.layers.10.self_attn.k_proj.weight', 'vision_model.encoder.layers.2.self_attn.v_proj.weight', 'vision_model.encoder.layers.0.self_attn.v_proj.bias', 'vision_model.encoder.layers.6.self_attn.out_proj.bias', 'vision_model.encoder.layers.4.layer_norm1.weight', 'vision_model.encoder.layers.5.self_attn.q_proj.bias', 'vision_model.encoder.layers.7.layer_norm2.bias', 'vision_model.encoder.layers.8.self_attn.k_proj.bias', 'vision_model.encoder.layers.8.self_attn.q_proj.bias', 'vision_model.encoder.layers.9.self_attn.out_proj.weight', 'vision_model.encoder.layers.4.self_attn.q_proj.bias', 'vision_model.encoder.layers.7.self_attn.k_proj.weight', 'vision_model.post_layernorm.weight', 'vision_model.encoder.layers.5.self_attn.k_proj.bias', 'vision_model.encoder.layers.3.self_attn.k_proj.weight', 'vision_model.encoder.layers.8.layer_norm2.weight', 'vision_model.encoder.layers.10.self_attn.out_proj.weight', 'vision_model.encoder.layers.9.mlp.fc1.weight', 'vision_model.encoder.layers.10.self_attn.out_proj.bias', 'vision_model.encoder.layers.6.self_attn.v_proj.bias', 'vision_model.encoder.layers.3.layer_norm2.bias', 'vision_model.encoder.layers.7.mlp.fc1.weight', 'vision_model.encoder.layers.2.mlp.fc1.weight', 'vision_model.encoder.layers.4.self_attn.k_proj.bias', 'vision_model.encoder.layers.0.mlp.fc2.weight', 'vision_model.encoder.layers.0.self_attn.out_proj.bias', 'vision_model.encoder.layers.6.self_attn.q_proj.bias', 'vision_model.encoder.layers.2.layer_norm1.weight', 'vision_model.encoder.layers.9.self_attn.k_proj.bias', 'vision_model.encoder.layers.7.self_attn.v_proj.weight', 'vision_model.encoder.layers.5.self_attn.out_proj.bias', 'vision_model.encoder.layers.0.mlp.fc1.bias', 'vision_model.encoder.layers.10.layer_norm1.weight', 'vision_model.encoder.layers.7.self_attn.q_proj.weight', 'vision_model.encoder.layers.3.self_attn.q_proj.weight', 'vision_model.encoder.layers.0.layer_norm2.bias', 'vision_model.encoder.layers.4.self_attn.q_proj.weight', 'vision_model.encoder.layers.11.self_attn.out_proj.bias', 'vision_model.encoder.layers.3.layer_norm1.bias', 'vision_model.encoder.layers.11.self_attn.q_proj.weight', 'vision_model.embeddings.position_ids', 'vision_model.encoder.layers.6.self_attn.k_proj.bias', 'vision_model.encoder.layers.1.mlp.fc1.weight', 'vision_model.encoder.layers.6.self_attn.k_proj.weight', 'vision_model.encoder.layers.2.mlp.fc2.bias', 'vision_model.encoder.layers.3.self_attn.out_proj.weight', 'vision_model.encoder.layers.2.mlp.fc2.weight', 'vision_model.encoder.layers.6.layer_norm2.bias', 'vision_model.encoder.layers.1.self_attn.v_proj.bias', 'vision_model.encoder.layers.5.layer_norm2.bias', 'vision_model.encoder.layers.4.layer_norm2.weight', 'vision_model.encoder.layers.6.mlp.fc1.weight', 'vision_model.encoder.layers.9.layer_norm1.weight', 'vision_model.encoder.layers.4.mlp.fc2.bias', 'vision_model.encoder.layers.1.self_attn.v_proj.weight', 'vision_model.encoder.layers.8.mlp.fc2.bias', 'vision_model.encoder.layers.9.layer_norm2.weight', 'vision_model.encoder.layers.7.mlp.fc2.bias', 'vision_model.encoder.layers.1.self_attn.q_proj.bias', 'vision_model.encoder.layers.0.self_attn.q_proj.weight', 'vision_model.encoder.layers.3.self_attn.out_proj.bias', 'vision_model.encoder.layers.3.mlp.fc2.weight', 'vision_model.encoder.layers.1.layer_norm2.bias', 'visual_projection.weight', 'vision_model.encoder.layers.0.self_attn.v_proj.weight']
- This IS expected if you are initializing CLIPTextModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing CLIPTextModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of the model checkpoint at openai/clip-vit-base-patch32 were not used when initializing CLIPVisionModel: ['text_model.encoder.layers.6.mlp.fc1.bias', 'text_projection.weight', 'text_model.encoder.layers.1.layer_norm1.bias', 'text_model.encoder.layers.11.mlp.fc1.bias', 'text_model.encoder.layers.8.self_attn.v_proj.weight', 'text_model.encoder.layers.2.self_attn.v_proj.bias', 'text_model.encoder.layers.2.self_attn.v_proj.weight', 'text_model.encoder.layers.2.mlp.fc2.bias', 'text_model.encoder.layers.8.mlp.fc2.bias', 'text_model.encoder.layers.6.layer_norm2.weight', 'text_model.encoder.layers.3.layer_norm1.bias', 'text_model.encoder.layers.8.layer_norm1.bias', 'text_model.encoder.layers.3.self_attn.out_proj.weight', 'text_model.encoder.layers.0.self_attn.q_proj.bias', 'text_model.encoder.layers.10.layer_norm1.weight', 'text_model.encoder.layers.6.mlp.fc2.weight', 'text_model.encoder.layers.8.layer_norm2.weight', 'text_model.encoder.layers.4.self_attn.q_proj.weight', 'text_model.encoder.layers.2.self_attn.k_proj.weight', 'text_model.encoder.layers.10.self_attn.k_proj.bias', 'text_model.encoder.layers.5.self_attn.k_proj.bias', 'text_model.encoder.layers.0.self_attn.k_proj.weight', 'text_model.encoder.layers.3.self_attn.k_proj.weight', 'text_model.encoder.layers.1.self_attn.v_proj.weight', 'text_model.encoder.layers.1.mlp.fc2.bias', 'text_model.encoder.layers.4.self_attn.q_proj.bias', 'text_model.encoder.layers.4.mlp.fc1.bias', 'text_model.encoder.layers.5.self_attn.q_proj.bias', 'logit_scale', 'text_model.encoder.layers.4.self_attn.v_proj.weight', 'text_model.encoder.layers.7.self_attn.q_proj.bias', 'text_model.encoder.layers.5.layer_norm1.weight', 'text_model.encoder.layers.10.mlp.fc1.bias', 'text_model.encoder.layers.1.self_attn.q_proj.bias', 'text_model.encoder.layers.11.mlp.fc1.weight', 'text_model.encoder.layers.8.self_attn.k_proj.bias', 'text_model.encoder.layers.10.mlp.fc2.bias', 'text_model.encoder.layers.0.self_attn.out_proj.bias', 'text_model.encoder.layers.9.self_attn.k_proj.weight', 'text_model.encoder.layers.10.mlp.fc2.weight', 'text_model.encoder.layers.1.self_attn.q_proj.weight', 'text_model.encoder.layers.10.self_attn.out_proj.weight', 'text_model.encoder.layers.6.layer_norm2.bias', 'text_model.encoder.layers.6.layer_norm1.weight', 'text_model.encoder.layers.5.layer_norm2.weight', 'text_model.encoder.layers.4.mlp.fc1.weight', 'text_model.encoder.layers.11.mlp.fc2.weight', 'text_model.encoder.layers.4.layer_norm1.weight', 'text_model.final_layer_norm.bias', 'text_model.encoder.layers.2.mlp.fc1.weight', 'text_model.encoder.layers.11.layer_norm2.weight', 'text_model.encoder.layers.7.mlp.fc1.weight', 'text_model.encoder.layers.3.self_attn.out_proj.bias', 'text_model.encoder.layers.1.layer_norm1.weight', 'text_model.encoder.layers.5.layer_norm1.bias', 'text_model.encoder.layers.8.layer_norm2.bias', 'text_model.encoder.layers.8.self_attn.v_proj.bias', 'text_model.encoder.layers.1.self_attn.v_proj.bias', 'text_model.encoder.layers.4.self_attn.k_proj.weight', 'text_model.encoder.layers.7.layer_norm1.weight', 'text_model.encoder.layers.9.layer_norm1.weight', 'text_model.encoder.layers.3.self_attn.v_proj.bias', 'text_model.encoder.layers.9.self_attn.v_proj.bias', 'text_model.encoder.layers.9.layer_norm2.weight', 'text_model.encoder.layers.11.mlp.fc2.bias', 'text_model.encoder.layers.4.self_attn.out_proj.bias', 'text_model.encoder.layers.1.mlp.fc1.bias', 'text_model.encoder.layers.11.layer_norm1.weight', 'text_model.encoder.layers.11.layer_norm1.bias', 'text_model.encoder.layers.8.layer_norm1.weight', 'text_model.encoder.layers.11.self_attn.out_proj.weight', 'text_model.embeddings.position_embedding.weight', 'text_model.encoder.layers.5.self_attn.k_proj.weight', 'text_model.encoder.layers.10.self_attn.v_proj.weight', 'text_model.encoder.layers.7.self_attn.out_proj.weight', 'text_model.encoder.layers.8.mlp.fc1.bias', 'text_model.encoder.layers.5.self_attn.out_proj.bias', 'text_model.encoder.layers.5.mlp.fc2.weight', 'text_model.encoder.layers.8.self_attn.out_proj.bias', 'text_model.encoder.layers.1.self_attn.k_proj.weight', 'text_model.encoder.layers.6.self_attn.out_proj.weight', 'text_model.encoder.layers.6.self_attn.v_proj.weight', 'text_model.encoder.layers.0.mlp.fc1.bias', 'text_model.encoder.layers.8.mlp.fc1.weight', 'text_model.encoder.layers.3.self_attn.v_proj.weight', 'text_model.encoder.layers.11.self_attn.v_proj.weight', 'text_model.encoder.layers.6.self_attn.k_proj.bias', 'text_model.encoder.layers.5.self_attn.q_proj.weight', 'text_model.encoder.layers.3.mlp.fc1.weight', 'text_model.encoder.layers.11.self_attn.q_proj.bias', 'text_model.encoder.layers.9.layer_norm2.bias', 'text_model.encoder.layers.4.mlp.fc2.bias', 'text_model.encoder.layers.10.layer_norm1.bias', 'text_model.encoder.layers.5.self_attn.v_proj.weight', 'text_model.encoder.layers.1.self_attn.k_proj.bias', 'text_model.encoder.layers.2.layer_norm2.bias', 'text_model.encoder.layers.0.self_attn.k_proj.bias', 'text_model.encoder.layers.2.self_attn.out_proj.weight', 'text_model.encoder.layers.8.mlp.fc2.weight', 'text_model.encoder.layers.10.self_attn.out_proj.bias', 'text_model.encoder.layers.10.layer_norm2.weight', 'text_model.encoder.layers.5.self_attn.v_proj.bias', 'text_model.encoder.layers.10.mlp.fc1.weight', 'text_model.encoder.layers.0.mlp.fc2.bias', 'text_model.encoder.layers.2.layer_norm2.weight', 'text_model.encoder.layers.1.mlp.fc2.weight', 'text_model.encoder.layers.10.layer_norm2.bias', 'text_model.encoder.layers.11.self_attn.v_proj.bias', 'text_model.encoder.layers.5.mlp.fc1.weight', 'text_model.encoder.layers.0.mlp.fc1.weight', 'text_model.encoder.layers.9.mlp.fc1.weight', 'text_model.encoder.layers.4.self_attn.out_proj.weight', 'text_model.encoder.layers.5.layer_norm2.bias', 'text_model.encoder.layers.10.self_attn.v_proj.bias', 'text_model.encoder.layers.5.self_attn.out_proj.weight', 'text_model.encoder.layers.3.mlp.fc1.bias', 'text_model.encoder.layers.1.layer_norm2.bias', 'text_model.encoder.layers.9.mlp.fc2.weight', 'text_model.encoder.layers.2.layer_norm1.weight', 'text_model.encoder.layers.7.layer_norm1.bias', 'text_model.encoder.layers.6.self_attn.v_proj.bias', 'text_model.encoder.layers.6.mlp.fc1.weight', 'text_model.encoder.layers.9.self_attn.k_proj.bias', 'text_model.encoder.layers.0.self_attn.out_proj.weight', 'text_model.encoder.layers.0.self_attn.v_proj.bias', 'text_model.encoder.layers.4.layer_norm2.weight', 'text_model.encoder.layers.0.layer_norm2.bias', 'text_model.encoder.layers.11.self_attn.q_proj.weight', 'text_model.encoder.layers.9.self_attn.q_proj.weight', 'text_model.encoder.layers.7.mlp.fc2.weight', 'text_model.encoder.layers.2.mlp.fc1.bias', 'text_model.encoder.layers.9.self_attn.out_proj.bias', 'text_model.final_layer_norm.weight', 'text_model.encoder.layers.4.layer_norm2.bias', 'text_model.encoder.layers.9.self_attn.out_proj.weight', 'text_model.encoder.layers.3.self_attn.q_proj.bias', 'text_model.encoder.layers.10.self_attn.k_proj.weight', 'text_model.encoder.layers.0.self_attn.q_proj.weight', 'text_model.encoder.layers.3.mlp.fc2.bias', 'text_model.encoder.layers.1.self_attn.out_proj.bias', 'text_model.encoder.layers.8.self_attn.q_proj.weight', 'text_model.encoder.layers.9.mlp.fc2.bias', 'text_model.encoder.layers.5.mlp.fc1.bias', 'text_model.encoder.layers.3.self_attn.k_proj.bias', 'text_model.encoder.layers.7.self_attn.v_proj.bias', 'text_model.encoder.layers.10.self_attn.q_proj.weight', 'text_model.encoder.layers.11.self_attn.k_proj.weight', 'text_model.encoder.layers.3.self_attn.q_proj.weight', 'text_model.embeddings.token_embedding.weight', 'text_model.encoder.layers.7.self_attn.k_proj.weight', 'text_model.encoder.layers.7.mlp.fc1.bias', 'text_model.encoder.layers.2.layer_norm1.bias', 'text_model.encoder.layers.7.self_attn.q_proj.weight', 'text_model.encoder.layers.9.self_attn.q_proj.bias', 'text_model.encoder.layers.6.self_attn.q_proj.bias', 'text_model.encoder.layers.6.self_attn.q_proj.weight', 'text_model.encoder.layers.2.self_attn.q_proj.bias', 'text_model.encoder.layers.7.mlp.fc2.bias', 'text_model.encoder.layers.6.self_attn.out_proj.bias', 'text_model.encoder.layers.9.layer_norm1.bias', 'text_model.encoder.layers.5.mlp.fc2.bias', 'text_model.encoder.layers.1.self_attn.out_proj.weight', 'text_model.encoder.layers.8.self_attn.q_proj.bias', 'text_model.encoder.layers.8.self_attn.k_proj.weight', 'text_model.encoder.layers.6.mlp.fc2.bias', 'text_model.encoder.layers.7.layer_norm2.weight', 'text_model.encoder.layers.7.self_attn.out_proj.bias', 'text_model.encoder.layers.10.self_attn.q_proj.bias', 'text_model.encoder.layers.3.layer_norm2.weight', 'text_model.encoder.layers.0.layer_norm1.bias', 'text_model.encoder.layers.4.mlp.fc2.weight', 'text_model.encoder.layers.1.mlp.fc1.weight', 'text_model.encoder.layers.4.self_attn.k_proj.bias', 'text_model.encoder.layers.0.self_attn.v_proj.weight', 'text_model.encoder.layers.4.layer_norm1.bias', 'text_model.encoder.layers.6.layer_norm1.bias', 'text_model.encoder.layers.11.layer_norm2.bias', 'text_model.encoder.layers.0.layer_norm2.weight', 'text_model.encoder.layers.7.self_attn.v_proj.weight', 'text_model.encoder.layers.0.layer_norm1.weight', 'text_model.encoder.layers.6.self_attn.k_proj.weight', 'text_model.encoder.layers.0.mlp.fc2.weight', 'text_model.encoder.layers.9.mlp.fc1.bias', 'text_model.encoder.layers.3.mlp.fc2.weight', 'text_model.encoder.layers.3.layer_norm2.bias', 'text_model.encoder.layers.2.self_attn.q_proj.weight', 'text_model.encoder.layers.4.self_attn.v_proj.bias', 'text_model.encoder.layers.9.self_attn.v_proj.weight', 'text_model.embeddings.position_ids', 'text_model.encoder.layers.2.self_attn.out_proj.bias', 'text_model.encoder.layers.3.layer_norm1.weight', 'text_model.encoder.layers.11.self_attn.out_proj.bias', 'text_model.encoder.layers.11.self_attn.k_proj.bias', 'text_model.encoder.layers.7.layer_norm2.bias', 'text_model.encoder.layers.8.self_attn.out_proj.weight', 'text_model.encoder.layers.7.self_attn.k_proj.bias', 'text_model.encoder.layers.2.self_attn.k_proj.bias', 'visual_projection.weight', 'text_model.encoder.layers.1.layer_norm2.weight', 'text_model.encoder.layers.2.mlp.fc2.weight']
- This IS expected if you are initializing CLIPVisionModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing CLIPVisionModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
instantiated sampler
instantiating dataloader
/home/aneesh/github/slot_vqa/train.py:292: UserWarning: torch.nn.utils.clip_grad_norm is now deprecated in favor of torch.nn.utils.clip_grad_norm_.
  torch.nn.utils.clip_grad_norm(model.parameters(), args.clip)
pred===========================> tensor([64, 64, 64, 64, 64, 64, 28, 64, 28, 64, 64, 64, 28, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64,
        64, 64, 28, 64, 64, 64, 28, 28, 64, 28, 64, 64, 64, 28, 28, 64, 28, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28,
        28, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 28, 64, 28, 64, 64,
        64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 28, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 28, 64, 64, 64, 64, 28, 64,
        64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 28, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 28, 28, 64, 64, 64, 64, 64, 64,
        64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 28, 64, 64, 64, 64,
        28, 64, 64, 64], device='cuda:0')
target=============================> tensor([ 66,  19,  39,  15,  51,  30,  82,  69,  28,  41,  21,  78,  36,  11,
         82,  36,  80,  23,  72,  90,  95,   4,  82,   7,  57, 101,  43,  15,
         69,  44,  41,  89,  70,  56,  15,  97,  13,  78,  65,   2,   3,  62,
        102,  62, 101,  82,  82,  68,  96,   2,  82, 101,  81,   1,   3,  28,
          1,  36,  63,  91,  57,  16,  79, 102,  73,  36,  85,  34,  79,  24,
        104,  11,  92,  29, 102,  73,  53,  94,  81,  79,  58,  86,  29,  38,
         21,  55,  51,  65,  92, 103, 100,  84, 103,  45,  87,  82, 101,  42,
         86,  29,  33,  37,  49,  12,  71,  94,   5,  74, 104,  67,  93,   4,
         82,  75,  95,  47,  76,  84,  49,  37,   3,  65,  40,  33, 103,  73,
         47,  66,  37,  27,  75,  71,  82,  77,   3,  78,  51,  83,   7,  61,
         76,  82,  51,  72,  62,  26,  36, 104,   1,  38,  58,  30,  65,  15,
         79,  73,  37,  93,   3,  55,  84,  56,   2,  91,  11,  42,  11,   4,
          2,  31,  59,  63,  29,  27,  62,  86,  22,  42,  40,  37,  57,  28,
          3,  90,  57,  36,  39,  16,  74,  21,  23, 103,  53,  90,  36,  46,
         81,  33,   4,  82,  34,  61,  33,  96,   9, 105,  47,  11,  73,  27,
         36,  76,   7,  19,  99,  67,  92,  48,  66,  97,  66,  20,  30,  69,
         23,  33,  31, 106,   3,  50,  51,  69,   5,  78,  70,  60,  86,  77,
         56,  43,  93,  73,  75,  58,  31,   3,  15,   4, 106,  63,  21,   3,
         36,  33,  89,  15], device='cuda:0')
pred===========================> tensor([64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64,
        64, 28, 64, 64, 64, 64, 64, 28, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64,
        64, 64, 64, 64, 28, 64, 28, 64, 64, 64, 28, 28, 64, 64, 28, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64,
        64, 64, 64, 64, 64, 64, 28, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 28, 64, 64, 28, 64, 28, 64, 64,
        64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 28, 64, 64,
        64, 64, 64, 64, 28, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64], device='cuda:0')
target=============================> tensor([ 35,  70,  33,  76,   4,  99,  73,  99, 101,  33,   1,   6, 101,  25,
         82,  77,   4,  33,  95,  21,  18,  36,  14,  72,  89,  33,  18,  44,
         53,  13,  79,  19,  31,  71,  60,  10,   6,  19,  12,  25,  27,  93,
         38,  31,  36,  10,  82,  31,  40,  24,  10,  16,  49,  24,  46,  94,
         54,   3,   3,  15,  54,  65,  57,  30,  23,  67,  68,  31,  76,  56,
         76,  37,  25,  27,  89,   2,  82,  88,  89,  81,  30,  43,  65,  79,
         36,  78,  36,  64,  67,  34,  73,   6,  27,  22,  33,  81,  82,  24,
         61,  55,  43,  44, 104,   4,  33,  30,   4,  21, 102,  11,  60,  61,
         43,  41,  43, 102,  90,  74,  86,  51,  66,  33,   3,  44,  15,  24,
         71,  49,   8,  52,   0,  12, 106,  90,  12,  35,  86,  79, 104,  95,
         76,  22,  36,  90,  47,  79,  86,  80,  24,  67,  34,  66,  17,  15,
         91,  90,  33,  65, 106,  10,  99,  49,  72,  20,  37,  77, 105,  64,
         10,  27,   4, 104,   8,  50,  24,  82,  52,  90,  83,  20,  10,   8,
         73,  82,  19,   6,  89,  42,  10, 103,  40,  26,  53,  30,  56,  24,
         30,  33,  32,  44,  18,   4,   4,  68,  92,   8, 101,  95,  83,  63,
         59,  33,  17,   9,  54,  61,  89,  12,  39,   2,  82,  61,  32,  73,
         45,  92,  81,   1,  33,  95,  36,  31,  76,   6,  84,  83,  60,  10,
         82,  49, 103,  59,  40,  92,  45,  69,  57,  97,  55,  33,  43,  82,
         82,  40,  17,  90], device='cuda:0')
pred===========================> tensor([64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 28, 28,
        64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 28, 28, 64, 64, 64,
        64, 64, 64, 64, 28, 64, 64, 64, 28, 64, 64, 28, 64, 64, 64, 64, 28, 64,
        64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 28, 64, 64, 64, 28, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 28, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64,
        64, 64, 64, 28, 64, 64, 64, 64, 28, 64, 64, 28, 64, 28, 64, 64, 64, 64,
        64, 28, 64, 28, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64,
        64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 28, 64], device='cuda:0')
target=============================> tensor([ 87,  27,   3,   3,   9,  51,   4, 101,  51,   3,   6,  19,  13,  26,
         73,  22,  94, 102,  53,   3,   2, 104,  27, 100,   3, 104,  79,  68,
         36,  78,  68,  11,  33,  70,   7,  69,  82,  38,  57,  14,  89,  67,
         49,  99,  33,  30,   8,  56,  30,  98,  94, 100,  33,  12,  65,  18,
          4,  71, 105,  47,  54,  76,  82,  59,  94,  82,   3,  56,  80,  28,
         33,  15,  17, 103,  50,  59,  25,   3,  47,   7,  91,  92,  27,  82,
         59,  31,  44, 102,   4,  17,  13,   5,  42,  25,  76,   3,  61,  98,
         38, 100,   6,  20,   3, 104,  36,  53,  33,  20,  28,  55,   2,  63,
         34,   2,  31,   4,  21,  36,  79,  33,  23,  84,  23,  11,  53,  82,
         16,   3,   6,   3, 101,  36,  40,  97,  74,  91,  36,  48,  28,  77,
         65,  77,  56,  33,  85,  90,  85,  64,  63,  59,  97,  81,  14,  93,
         33,  38,   3,  15,  41,  81,  94,  32,  93,  33,  11,   7,  95,  69,
         83,  52,  50,  60,  94,  50,  82,  74,  19,  33,   5,  44,  57,  14,
         28,  23,  23,  82,  53,  10,   0,  76,  45,  92,  51,  34,  30,   3,
         43,  14,  95,  82,   5,  28,  39,  33,  61,  33,  36,  23,  88,  31,
         50,  66,  81,  21, 104,  54,  81,  91,  41,  73, 104,   5,  59,  36,
         84,  25,  40,   1,  33,  47,  99,  79,  85,  21,  29,  77,  33,  62,
         16,  82,  31,  11,  68,  14,  70,  86,  82,  22,  68,  82,  28,   3,
         36,  95,  82,  41], device='cuda:0')
pred===========================> tensor([64, 64, 64, 64, 28, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64,
        64, 28, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64,
        64, 28, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 28, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 28, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64,
        64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 28, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64], device='cuda:0')
target=============================> tensor([ 18,  82,   5,   1,   3,  91,  86,   2,  65,  55,  54,  73,  82,  14,
          8,  40, 106, 101,   7,  36,  90,  97,  60,  75,   4,  81,   3,  93,
         89,  29,  35,   6,  20,  57,  47,  63,  64,  36,  49,  33,  25,  76,
         13,  39,  18,  49,  87,   2,  74,  78,  93,  77,  28,   4,  94,  22,
         83,  56,  13,   5,  13,   4,  11,  44,  25,  89,  20,   4,  49,  68,
         71,  74,  39,  64,  86,   2,  58,  74,   5,  54,   4,   8,  54,   1,
         47,  37,  34,  81,  83,  93,  60,  82,  58,  65,  33,  97,  27,  29,
         35,  61,   4,  83,  92, 101,  68,  33,  47,  43,  33,  41,   5,  85,
         79,  82,  36,  40,  53,  22, 102,  61,  91,  11,  20,  62,  13,  56,
         51,  33,  87,  70,  13,  57,  47,  60,  72,   3,   4,  78, 106,  97,
          5,  33,   3,   4,  34,  95,  71,   9,  33,  93,  50,   8,  80,   4,
         73,  39,  36,  39,  82,  44,  87,  73,  80,  31,   3,  52,  35,  72,
         39,  59,  41,  88,  64,  77,  45,  20,  57,  50,  13,  86, 103, 103,
          9,  48,  85, 104,  58,  22,  73,  74,  39,  61,  42,   3,   6,  82,
         78,  65,  55,  96,  38,  10,   3,  23,  71,  63,  17,  87,  88,   3,
        103,  56,  21,  58,  18,  48,  80,  95,  56,  93,   4,  44, 101,  45,
         90,   7,  23,  96,  54,  23,  89,  48,  27,  33,  88,  29,  59,  55,
          3,  34,  11,  29,  28,  19,  53,  93,  75,  84,  65,  43,  36,   4,
         72,   7,  36,  26], device='cuda:0')
pred===========================> tensor([28, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        28, 64, 64, 64, 28, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 28, 28, 64,
        64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 28, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 28, 28, 28, 64, 64, 64,
        64, 64, 28, 64, 64, 28, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64,
        64, 28, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 28, 64,
        64, 64, 28, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64], device='cuda:0')
target=============================> tensor([ 48,  34,  45,  12,  57,  62,  30,   3,  64,  97,  82,  64,  87,  24,
         40,  17,  44,  35,  43,  53,   2,  68,  27,  26,  36,  46,  95,   8,
         78,  88,  76,  86,  18,   1,  56,  16,  55,  64,  29,  27,  68,   5,
         56,  71,   3,  94,  58, 100,  21,   0,  46,  47,  55,  29,  86,  36,
         44,  97,  68,  74,  79,  57,  73,  68,  94, 102,  61,  89,  46,  19,
         86,  34,  24,   4,  76,  78,  87,   3, 102,  23,  15,   3,  71,  44,
         24,  36,  37,  81,  93,  56,  82,  99,  96,  70,  82,  64,  74,   4,
          3,  27,  89,  66,  82,  97,  82,  38,  33,  60,  21,   5,  12,   3,
         22,  34,  93,  94,   4,   9,  49,  53,  26,   5,  54,  87,  74,  71,
         55,  33, 100, 105,  13,   6,  82,  54,  76,   6,  52,  92,  73,  18,
         82,  77,  20,  69,  13,  33,  23,  28,  96,  85, 102, 101,  69,  86,
         36,  13,  97,  36,  54,  40, 104, 103,  54,  81,  82,  52,  21,  61,
         12,  40,  40,  87,   5,  14,  56,  66,  52,  49,  77,  13,  34,  44,
         21,  76,  67,  69,  35,  97,   3,  41,  82,  65,  45,  16,  82,  42,
         40,  88,  52,  30,  27,  64,  58,  82,  52,  38,  84, 101,   1, 102,
          4,  60,  31,  69,   6, 105,  48,   3,  43,  61,  94,   7,  11,   9,
         99,  99,  90, 102,  28,   4,  20,  58,  89,  38,  62,  54,  75,  28,
         69,  38,  16,  14,  45,  29,   3,  42,  79,  13,  36,   0, 101,  51,
        100,  16,   3,  33], device='cuda:0')
pred===========================> tensor([64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64,
        28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 28,
        64, 28, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 28,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64,
        64, 64, 28, 64, 64, 64, 28, 64, 64, 28, 64, 64, 64, 64, 64, 64, 28, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 28, 64,
        64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 28, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64], device='cuda:0')
target=============================> tensor([ 44,  45,  84,   6,  36,  99,  57, 100, 104,  47,  64, 106,   5,   7,
          4,  94,   3,  27,   4,  21,  82,  89,  40,  98,  80,  36,  25,  61,
         14,  83,  36,   1,  51,  66,  19,  36,  58, 105,   6,  26,  85,  31,
          5,  65,  12,  77,  72,   3,  82,  64,  53,   3,  22,  95,   3,   7,
         19, 106,  88,  17, 105,  36,  27,  72,  82,  26,  19, 105, 100,  69,
         28,  73, 102,   7,  64,   7,   1,  19,  67,  31,  12, 103,  11,  73,
         91,  52,  13,  62,   0, 105,  79,  16,  35,   5,   3,  42,   3,  53,
         37,  10,  13,  31,  12,  73,  54,   4,  54,  37,  60,  92,  36,   3,
         55,  33,  39,  41,  71,  35,  14,  89,  10,  99,  35,  84,   3,  57,
         91,  39,  51,  70,  28,  75,  34,   1,  26,   0,  70,  39, 103,  44,
          3,  15,   2,   2,  30,  60, 105,  34,  61,  15,  67,   6,  92,  75,
         32,  82,  23,  77,  72,  21,  84, 101,   8,  23, 100,  74,  86,  83,
         33,  43,   4,  94,   4,   4,  36,   4,  88,  91,   2,  25,   3,  12,
         81,  26, 101,  71,  12,  69,   1,  60,  25,  87,  79,  91,   3,  17,
         12,  79,  91,  80,  38,   9,   9,  58,  31, 103,   4,   1,  36,  79,
         36,  35,  52,   1,  82,  27,  82,  13,   0, 102,   2,  23,  62,  82,
         66,  12,   2,  58,  75,  53,  29,  81, 101,  20,  47,  14,  34,  91,
         36,   3,  49,  83,  26,  58,  19,   4,  39,  33,  42, 106,  16,  57,
         48,  35,  23,  96], device='cuda:0')
pred===========================> tensor([64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64,
        28, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 28, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64,
        28, 64, 64, 64, 28, 64, 64, 64, 28, 64, 64, 64, 64, 64, 28, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64,
        28, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 28, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 28, 64, 64, 28, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 28, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64,
        64, 64, 64, 28], device='cuda:0')
target=============================> tensor([ 10,  89,  37,  44,  36,  68, 101,  95,  61,  18,  57,  29,  96,  33,
          4,  85,   4,  33,  48,  97,  21,  15,  73,  75,  36,  72,  26, 104,
         18,  81,  48,  33,  55,  57,  89,  52,  32,  77, 103,  61,  11,  27,
         93,  53,  76, 105,  17,   3,  30, 101,   2,  42,  25,  65,  45,  39,
        103,  52,  12,  36,  50,  90,   4,  33,  20,  36,  41,  34,  39,  27,
         51,  85,  36,  35,  45,   3,  63,  75,  43,  44,  32,  33,  15,  79,
         86,  61,  77,   6, 100,  58,  27,  34, 102, 101,  54,  78,  63,   9,
          4,  76, 100,   7,  40,  38,  64,  70,   7,  83,  15,  86, 102,  84,
         36,  70,  78,  98,  14,  22,  72,  19,  19,  75,  81,  79,  63,  14,
        105,  89,  95,  93,   5,  44,  82,  79,  66,  67,  61,  26,  34,  58,
        104,  71,  82,  96,  18,   6,  91,  11,  43,  43,  27,  90,  30,  36,
         19,   3,  33,   8,  12,  75,  44,  93,   3,   4,  18,  73,  27,  75,
         62,  44,  10,  75,  98, 102,  66,  86,  19,  95,  68,  52,  69,  76,
         42,  33,  82,  52,  90,  14,  31,  89,  82,  15,  16,  74,  44, 104,
          4,  99,  78,  98,  36,  31,  45,  39, 104,  41,  79,  81,  69,  99,
         31,  20,  87,  92,   5,  42,  43,  41, 101,  78,  21,  92,  33,  26,
         45,  71,  79,  63,   4,  23,  69,   4,  45,  63,  43,  45,  54,  74,
         95,   7,  72,  17, 103,  96,  42,  97,  15,  83,  84,  46,   6,  92,
         78,  70,  19,  56], device='cuda:0')
pred===========================> tensor([64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 28,
        28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64,
        64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        28, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 28, 28, 28, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64,
        64, 28, 64, 28, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 28, 64, 64, 64, 64, 28, 64, 28, 64, 64, 64, 64, 64, 64, 64, 28, 64,
        64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 28, 64, 28, 64, 64, 64, 64,
        28, 64, 64, 64, 64, 64, 28, 64, 28, 64, 64, 64, 28, 28, 64, 64, 64, 64,
        64, 64, 64, 28], device='cuda:0')
target=============================> tensor([ 83,  20,  60,  77,  16,  26,  56,  77,  38,  44,  32,   6,  40,  59,
         74,  44,  41,  69,  23,  56,  63,  45,   5,  65,  58,  49,  73, 103,
          9,  81,  19,   9,  89,  80,  36,  39,  51,  25,  66,  51,  85, 105,
         71,   7,  10, 104,  99,  54,  82,  95,  89,  13,  24,  89,  36,   4,
         85,  65,  26,  67,   3,  63,  61,  49,  74,   5,  33,  30,  30,  53,
         70,  27,  38,  12,  85,  76,  28,  44,   4,   1,  79,  95,  74, 105,
         96,  42,  70,  61,  93,  85, 102,  69,  68,   3, 104,  79,  94,  11,
          3,  52,  57,  65, 103,   3,   5,  69,  80, 102,  58,  85,  25,  29,
         31,  99, 102,  75,  36,  28,  62,  76,   8,  78,  45,  36,   2,  91,
         11, 103,  45, 105,  47,  66,  65,  74,  36,  22,  35,  73,  71,  83,
         57,  56,  71,  53,  36,  83,  89,  31,  13,   2,  40,   9,  50,  82,
         58,  72,   5,  21,  61, 102,  67,   5,  62,   3,  52,  24,  38,  22,
         71,  64,  24,  82,  92,  29,  48,  33,  78, 104,  91,  27,   2,  36,
         49,  71,  61,   5,  19,   2,  94,  23,  12,  41,  17,  44,   6,  79,
         15,  27,  81,   3,  12,  82,  41,  97,  60,  11,   3,  24,  91,  62,
         37, 100,  36,  93,  36,  84, 100,   1,   1,  31,   3,  38,  38,  88,
         80,   3,  58,  99,  21,  94,  33,  82,  97,  34,  82,  57,  97,  82,
          9,  29, 104,   3,  36,   3,   4,  47,  31,   2,  77,  33,  24,  15,
         30,  16,  82,  82], device='cuda:0')
pred===========================> tensor([64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        28, 64, 64, 64, 28, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 28, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28,
        64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 28, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 28, 64, 28, 64, 64, 64,
        64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 28, 64, 64, 28,
        64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 28, 64, 64,
        28, 64, 28, 64, 64, 64, 64, 28, 64, 64, 64, 28, 64, 64, 28, 64, 64, 64,
        64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 28, 64, 64, 64, 64,
        64, 64, 64, 64], device='cuda:0')
target=============================> tensor([  0,  36,  25,  35,  95, 103,  54,  21,  20,   7,   3,  51,  71,  75,
         59,  84,  34,   4,  90,  87,  75,  14,  82,  19,  36,  26,  72,  87,
         76,  61, 101,  51,  81,   2,  94,  59,   4,  41,  37,  13,  72,  79,
         96,   4,   4,  18,   6,  72,  82,  84,   6,   2,  65,  85,  45,  55,
         52,  83,  60,   6,  19,  94,  97,  40,  13,  56,  28,  53,  37,  25,
         83, 103,  83,  76, 102,   4,  77,  66,  70,  96,  75,   5,  11,  79,
          2,   1,  59,  21,   9,  64,  53,   1,  23,  33, 102,   4,  67,  24,
         39, 102,  36,  63,  92,  10, 103, 101,  82,  23,  98,   0,  69,  34,
         14,  67,  99,  10,  24,  96,  33,  37,  57,   7,  93,  94,  18,  18,
         67,  58,  54,  21,   2,  49,  64,  55,  84,  36,  47,  84,  82,  70,
          3,  17,  55,  30,  78,  22, 102,  36,  86,  66,  36,  55,  39,  75,
         70,  36,  78,  90,  71,  28,  80,  59,   9,   3,  25,  15,   3,   3,
         44,  42,   9,  26,  58,  66,  17,  82,  82,  21,  12,  36,  17, 100,
         29,   3,  29,  42,  53,  66, 105,  63,  33,  33,  82,  33,  73,  80,
         37,  67,  49,  29,   8,  50,  63,  51,  60,  93, 104,  83,  59,  47,
         29,  38,   3,  90,  28,   1,  92,  54,  19,  82,  63,  72,  53,  72,
         13,   3,  72,  89,  40,  63,  38,  43,  69,  54,  82,  30,   5,  74,
         73,  56,  78,  86,  62,  99,   6,  94,  43,  83,  36,   6,  49,  85,
         36,  10,   6,   5], device='cuda:0')
pred===========================> tensor([64, 64, 64, 64, 28, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 28, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 28, 64, 64,
        64, 64, 28, 64, 64, 28, 64, 64, 64, 64, 64, 28, 28, 64, 64, 28, 64, 64,
        64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 28, 64, 64, 28, 64, 28, 64, 64, 28, 64, 64, 28, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 28, 64, 28, 28, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 28, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 28, 64, 28, 64, 64, 28, 64, 64, 28, 64, 28, 64, 64, 64, 28, 28,
        28, 64, 28, 64, 64, 64, 64, 64, 64, 28, 28, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 28], device='cuda:0')
target=============================> tensor([ 97,  58,  27,  16,  36, 101,   4,  82,  99,  33,  23,  96, 100,  36,
         43,  86,  51,  32,  13,  52,  16, 100,  55,  75,  61,  41,  59,  13,
         31,  98,  61,  37,  82,   4,  64,  53,  33,  39,  63,  38,  22,   7,
         87,  58,  31,  98,  26,  69,  63,  61,  53,  17,  90,  44,  99,  85,
         50,  97,   5,  56,  56,  10,  36,  63,  36,  75,  45,   6,  36,  12,
         65,  15,  12,  44,  36,  25,  72,  94,  36,   4,  15,  23,  33,  21,
         82,  76,  68,  96,  12,   6,   6,  54,  88, 106,  35,  79,  92,   3,
         22,  96,  61,  83,   2,  16,  20,  81,  39,  92,  41,  76,  58,  16,
         71,   1,  27,  51,  72,  43,  11,   3,  75,  24,  57,  56,  34,  83,
         33,  30, 104,  49, 101,  78,  77,  68,  73,  15,  30,  93,  16,  10,
         33,  98,  28,  10,  55,   4,  36,  49,  82,  31,  28,  30,  73,  59,
         19,  92,  53,  82,  17,  75,   4,  46,  99,  95,   3,  74,   1,  59,
         51,  28,  77,  78,  73,  87,   2,  72,  98,  82,  57,  31,  45,  22,
         61,  82,   4,  94,  65,  60,  82,  33,   3,  86,   3,  99,  70,  15,
          1,  21,  61,  36,  19,  96,  66,  20,  84,  13,  36,  37,  36, 101,
         63,  84,  63,  71,  66,  13,  21,  51,  82,  65,   2,  87,  51,  31,
         81,  64,  82,  60,  47,  27,  45,  72,  16,  33,  73,  22,  54,  75,
         23,  14,   3,  62,  66,  89,  36,  68, 100,  13,  52,   3,   7,   8,
         80,  15,  17,  87], device='cuda:0')
pred===========================> tensor([64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        28, 64, 64, 28, 64, 28, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 28,
        28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64,
        64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 28, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 28, 28, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 28,
        28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28,
        28, 64, 28, 64, 64, 64, 64, 64, 28, 64, 64, 64, 28, 64, 64, 64, 64, 64,
        64, 64, 64, 64], device='cuda:0')
target=============================> tensor([ 33,  23,  29,  97,  51,  33,  53,  11,  76,  78,  84,  54,  43,   4,
         17,  82, 101,  54, 106,  49,   9,  31, 101,  94,  12,   4, 100,  81,
         60,  60,  26,  87,  51,  57, 104,  95,  13,   3,  89,  64,  78,  16,
         24,  53,  76,  74,  95,  76,  50,   3,  21,  62,  62, 100,   5,  87,
         74,  93,  82,   4,  96,  36,  90,  87,  27,   3,   7,  13,  14,   4,
         36,  18,  84,  59,  82,  93,  29,  33,   1,  53,  21,  75,  85,   1,
         48, 106,  55,   4,  38, 104,   1,  33,  87,  34,  69,  21,  25,  72,
         43,  25,   4,  36,  49,  99,  86,   9,  18,  94,  45,  93,  58,   7,
        103, 101,  94,  13,  94,  33,  66,   8, 101,  30,  62,  61,  14, 103,
         39,  96,  99,  14,  62,   4,  49,  83,  27,  80,  56,  59,   3,  33,
         30, 100,   4,  87,  66,  63,  72, 103,  82,   5,   2,  33,  95,  15,
         74,  38,  37,  38,  90,  26,  33,  36,  54,  73,  37,  85,  28,  45,
         83,  94,  21,  47,  10,  81,  34,  71,  38,  35,   4,   4,  99,  83,
         33,  42, 100,   9, 105,  47,  37,  15,  79,  28,  16,   8,  43,  78,
        105,   4,  55,  33,  55,  69,  33,  73,  55, 100,  95,  69,  61,  17,
        101,  45,  96,  89,  67,  89,  96,  21,  29,  64,  18,  33,  68,  56,
         27,  61,  44,  16,  68,  96,  66,  50,  81,  18,  13,  60,  36,   2,
         47,  53,  36,  67,  13,  36, 103,   5,  19,  12,  62,  63,  12,  64,
         82,  28,  61,   7], device='cuda:0')
pred===========================> tensor([64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 28, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 28, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 28,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64,
        64, 64, 64, 28, 64, 28, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64,
        64, 64, 64, 28, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64,
        64, 28, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 28,
        64, 64, 64, 64, 28, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28,
        64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        28, 64, 64, 64], device='cuda:0')
target=============================> tensor([ 26,  85,  54,  91,  33,  66,  36,   4,  36,  13,  51,  76,  40,  96,
         56,  24,  61,  28,  86,  82,  23,  37,  52,   4,  41,  49,  94,  36,
         14,  82,  69,  85,  62,  36,  80,   0,  43,  47,  80,  82,  95,   3,
         71,  41,  83,  42,  50,  55,   4,   4,  82,  35,  97,  70,  28,  94,
         43,  78,  41,  64,  63,  93,  49,  17,   3,  15,  89,  73,  28,  72,
         81,  76,  91,  69,  29,  88,  44,  11, 102,  37,  52, 101,   6,   4,
         63,  39,   3,   3,   3,  60,  27,  52,  33,   8,  96,  36,  79,   4,
         91,  61,   3,  85,  32,  66,   3,  26,  32,  14,  72,  87,  57,  96,
         78,  86,   7,   8,  41,   8,  74,  91, 100,   2,  77,  82,  25,   4,
         57,   8,  29,  22,  93,   3,  82,   2,  12,  80,   4,  61,   3,   4,
          3,  26,   5,  11,  99,  35,  26,  99,  68,  22,  16,  73,  36,  14,
          1,  78,  26,  83,  51,  96,  74,  86,  87,   4,  15,  45,  51,   3,
         74,  31,  92,  39,  82,  31,  22,   4,  26,  59,  59,  54,  11,   3,
         59,  13,  30,  82,  47,  21,  24,   3,  78,  51,  64,  81,  16,  23,
         99,  59,  87,  36,  33,  33,  52,  13,  66,  42, 104,  37,  74,  43,
         68,  11,   7,  65,  36,  14,  41,  40,  28,  76,  82,  79,  10,  19,
         54,   6,  82,  80,  70,  35,  84,  98,   6,  36,  56,   9,  13,  82,
         51,  51,  84,  38, 100,  34,  94,   0,  17,  34,  49,   0,  90,  59,
         56,  87,   3,  18], device='cuda:0')
pred===========================> tensor([64, 28, 64, 64, 28, 64, 28, 64, 64, 64, 64, 64, 28, 28, 64, 64, 64, 64,
        64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 28, 64, 28,
        64, 64, 64, 64, 64, 64, 64, 28, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 28, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 28, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 28, 64, 64,
        28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 28, 64, 64, 64, 64, 64, 64, 28,
        64, 64, 64, 28, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 28, 64, 28, 28, 28, 64, 64, 64, 64, 64, 64,
        28, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 28, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 28, 28, 28, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 28, 28], device='cuda:0')
target=============================> tensor([ 77,  76,  14,  17,  96,  33,  64,  12,   4,  62,  85,  54,  64,  82,
         47,  98, 100,  74,   4,  99,  82,   4,  20,  60,  35,   8,  48,  61,
         90,  28,  10,  89,  78,  33,  31,  82,   6,  62,  23,  72,  15,  53,
         93,  57,  94,  61,  69,  97,  34,  28,  62,   2,  90, 103,   0,  22,
         72,  36,   7,   3,  43,  87,  61,  85,  18,  33,  48,   4,  79,  12,
         87,  71,  13,  11,  12,  20,  33,  24,  35,  32,  90,   9,  33,   3,
         16,  52,  31,  37,  88,   4,  70,  43,  65,  85,  95,  86,  83,  97,
         81,   9,  95,  50,  65,  72,  96,  63,  28,  33,  36,  33,  42,  26,
         32, 103,  13,  38,  78,  27,   1,  87,  70,  56, 103,  27, 105,   4,
         61,  17,  36,  52,  69,   3,  17,  73,  47,  42,  94,  13,   9,  80,
         12,  98,  76,  29,  52,   3,  96,  17,  33,  57,   9,  51,  33,  11,
          1,  69, 105,  92,  34,  93,  42,  28,  43,  10,  61,  57,  40,  31,
         59,  36,  67,  14,  13,  82,  72,  82,  58,  91,  34,  77,  75,  30,
         36,  30,  52,  33,  61,   3,  33,  97,  23,  57,  30,  11,  99,  79,
         70,  26,  63,   9,  19,   3,  10,  72,  64,  71,  30,  97,  79, 101,
         40,  47,  12, 104,  26,  51, 104,  25,  78,  50,  29,  89,  76, 103,
         94,  96,   3,  91,  48,  41,  93,  75,  98,  58,  24,   3,  23,  33,
         29, 103,  43,  15,  89,  31,  61,  47,  49,  89,  52,  60,  27,  27,
         17,  77,  14,  82], device='cuda:0')
pred===========================> tensor([64, 64, 64, 64, 64, 28, 28, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        28, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 28, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 28, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        28, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 28, 64, 64, 64, 28, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 28, 64, 64, 64, 64, 64, 64, 64, 28, 28, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 28,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 28, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64,
        64, 64, 64, 64], device='cuda:0')
target=============================> tensor([ 33,  95,  30,  99,  50,   3,  42,  80,  89,  54,  22, 103,  18,  63,
         89,  86,  62,  19,  62,   6,  38,  96,  81,  42, 102,  56,  77,  90,
         24,  81,  66,  15,  98,  99,  14,  51,  70,  78,  69,  13,  66,  82,
         60,  82,  88,  46,  94,  34, 103,   2,  74,  50,  24,  92,   1,  68,
         82,  11,   7,   4,   4,  38,  98,  89,  71,  64, 106,  33,   3,  33,
         71,  59,  75,  91,  99,  81,  44,  36,  15,  14,   8,  36, 104, 102,
         82,  57,  36,  41,  36,  15,  75,  36,  33,  79,  33,  61,  47,  12,
         74,  71,  86,  35, 103,  81,  82,   8,  74,  19,  93,  63,  19,  40,
         99,  25,  10,  65,  37,  36,   4,   3,  14,   4,  82,  55,  19,  33,
         94,  18,  66,  91,  91,   6,  17,  38,   4,  85,  95,  74,  63,  89,
         95,  85,  83,  37,  31,  28,  74,  93,  88,  45,  77,  97,   7,   2,
         33, 101,  82,  98,  33,  54,  33,   2,  73,   3,  69, 102,  14,  95,
         31,   1,  60,  67,  30,  61,   4,  96,  44,  43,  87,  93,  83,  65,
         53,   9,   3,  49,  33,  80,   4, 103,  77,  66,   3,  90,  38,  46,
         18,  71,  80,  33,  87,  81,  38,  44,   2,  33,  56,  83,   4,  82,
         40,  50,  50,  54,   3,   2,  53,  68,  33,  65,  89,   8,  93,  60,
         37,  77,  60,  36,  59, 101,  37,  77,   3,  56,  89,  33,  74,  80,
         39,  87,  66,  87,  23,  60,  10,  42,  67,  64,  31,  57,  12,  47,
         44,  72,  85,  19], device='cuda:0')
pred===========================> tensor([28, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 28,
        64, 64, 64, 64, 28, 28, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        28, 64, 64, 64, 28, 64, 28, 64, 64, 64, 64, 64, 28, 64, 28, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 28, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 28, 64, 64, 64, 64, 28, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 28, 64, 64, 64, 28, 64, 64, 64, 64, 28, 64, 64, 64,
        64, 64, 28, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 28, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 28, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64,
        28, 64, 64, 64], device='cuda:0')
target=============================> tensor([ 82,  51,  92,  84,  13,  29,  79,  52,  68,  70,  25,  25,  33,  16,
         64,  70, 104,  28,  49,  21,  12,  49,  24,  82,  97,   7,   3, 100,
         97,  82,  33,  95,  31,  82,  76,  33,   6,  38,  94,  42,  61,  82,
         59,  83,  82,  16,   4,  23,  54,  33,  36,  51,  80,  29,   9,  93,
         80,  60,  36,  12,  80,  15,  27,  23, 101,  49,   4, 102,  89,  18,
         71,  98, 100,  25, 101,   7,  99,  86,  60,  26,  88,  60,  65, 102,
         64,  65,  70,  39,  94,  76,   9,  92,  69,  55,   4,  41,  95,  31,
         84,  96,   4,  62,  71, 100,  88,   3,  69,  53,  16,  88,  62,  84,
         79,  15,  87,  90,   1,  74,  31,   5,  81, 102,  16,  84,  73,   3,
          4,  38,  31,  62,  82,  54, 106,  29,  59,  30,  61,  72,  55,  82,
         33,  28,  43,  19,  68,  89,  30,  98,  62,  82,  93,  46,  77,  86,
          5,  43,  80,  57,  82, 104,  12,  83,  53,  44,  31,  71,   3, 103,
         49,   3,  64,  76,  32,  68,  23,  82,  69,  32,  35,  84,  96,  84,
         56,  18,  82,  72,  58,  52,  48,  99,  66,  57,  80,  71, 100,  71,
         51,  40,  23,  90,  38,  36,  45,  22,  26,   3,  69,  44,  95,  33,
         26,  78,  83,  19,  17,  39,  14,  18,  36,  27,  50,  12,  70,   8,
         90,  33,  65, 100,  61,  87,  64,  64,  51,  31,  99, 106,  11,  49,
         93,  72,  33,  40,  47,  19,   3,  61,  19, 100,   4,  59,  17,  62,
         19,  25,  27,  25], device='cuda:0')
pred===========================> tensor([28, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 28, 64, 64, 28, 64, 64, 64,
        28, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 28, 28, 64,
        64, 64, 64, 28, 28, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 28, 64, 28, 28, 64, 64,
        28, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64,
        28, 28, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 28, 64, 64, 64,
        64, 64, 64, 64, 28, 64, 28, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 28, 28, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28,
        64, 64, 64, 64, 64, 64, 28, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 28, 64, 64], device='cuda:0')
target=============================> tensor([  4,  68,  57,  89,  22,   4,  82,  33,  87,  50,   3,   2,  36,  31,
         31,  23,  38,  84,  36,  35,  68,  86,  26,  62,  73,  77,   3,  15,
          9,   9,  95,  89, 105,  52,  78,  80,  60,  83,  85,  84,  42,  81,
         27,  36,  10,  37,  71,  95, 100, 104,  36,  98,  58,  10,  22,   1,
         25,  45,  36,  21,  73,   8,  84,  62,  82,  15,   3,  73,  75,  38,
         41,  70,  17,  14,  95,  34,   4,  57,  79,  56,  47,  78,  27,  81,
         80,  75,  36,  61, 101,  54,  30,  82,   3,  50,  95,   4,  87,  57,
         11,  65,  17,  35,   5, 104,  29,  24,  73,  88,  19,  82,  24,  53,
         63,   4,  61,  85,  41,  67,  53,  33,   4,  82,  94,  58,  74,  53,
         53,  35,  72,  50,  87,  20,  95,  71,  35,  39,  28,  86,  18,  82,
         78,   3,  74,  14,  14,  36,  24, 101,  52,  89,  74,  66,  65,   4,
         73, 100,  54,  37,  31,  66,   2,  51,  40,  74,  83,   4,  57,   2,
          7,   6,  55,  81,  19,  47,  18,  87,  23,  84,  18,   4,  58,   4,
         79,   4,   2,  70,  94,  75,  33,  38,  36,  58,  86,  75,   4,  24,
         46,  57,  82,  69,  40,   9,  89,  94,  82,  27,  87,  18,  36,   8,
         65,  82,  86,  43,  42,  73,  58,  47,  54,   7,   5,  38,  33,  13,
         30,  74,  67,  34,   2,  46,  28,  53,   8,  63,  71,  25,  18,  31,
         92,   3,  82,  59,  89,  61,  12,  20,  16,  20,  18,  50,  83,  15,
