
train.py
[34m[1mwandb[39m[22m: [33mWARNING[39m Calling wandb.run.save without any arguments is deprecated.Changes to attributes are automatically persisted.
ftfy or spacy is not installed using BERT BasicTokenizer instead of ftfy.
Some weights of the model checkpoint at openai/clip-vit-base-patch32 were not used when initializing CLIPTextModel: ['vision_model.encoder.layers.3.self_attn.out_proj.bias', 'vision_model.encoder.layers.8.layer_norm1.bias', 'vision_model.encoder.layers.10.mlp.fc1.weight', 'vision_model.encoder.layers.3.self_attn.out_proj.weight', 'vision_model.encoder.layers.6.self_attn.v_proj.bias', 'vision_model.encoder.layers.7.self_attn.v_proj.weight', 'vision_model.encoder.layers.0.mlp.fc2.bias', 'vision_model.encoder.layers.4.layer_norm2.weight', 'vision_model.encoder.layers.0.mlp.fc1.bias', 'visual_projection.weight', 'vision_model.encoder.layers.9.mlp.fc1.weight', 'vision_model.encoder.layers.0.self_attn.out_proj.weight', 'vision_model.encoder.layers.3.layer_norm1.weight', 'vision_model.encoder.layers.1.self_attn.q_proj.bias', 'vision_model.encoder.layers.6.self_attn.out_proj.weight', 'vision_model.encoder.layers.9.mlp.fc2.weight', 'vision_model.encoder.layers.4.layer_norm1.weight', 'vision_model.encoder.layers.2.mlp.fc2.bias', 'vision_model.encoder.layers.4.self_attn.out_proj.bias', 'vision_model.encoder.layers.7.layer_norm2.weight', 'vision_model.encoder.layers.6.mlp.fc1.weight', 'vision_model.encoder.layers.9.layer_norm1.bias', 'vision_model.encoder.layers.3.layer_norm1.bias', 'vision_model.encoder.layers.6.mlp.fc1.bias', 'vision_model.encoder.layers.6.self_attn.out_proj.bias', 'vision_model.encoder.layers.3.self_attn.k_proj.bias', 'vision_model.encoder.layers.3.layer_norm2.weight', 'vision_model.encoder.layers.5.mlp.fc2.weight', 'vision_model.encoder.layers.5.mlp.fc1.weight', 'vision_model.encoder.layers.6.layer_norm1.bias', 'vision_model.encoder.layers.5.mlp.fc2.bias', 'vision_model.pre_layrnorm.bias', 'vision_model.encoder.layers.6.mlp.fc2.bias', 'vision_model.encoder.layers.11.mlp.fc1.bias', 'vision_model.encoder.layers.8.mlp.fc2.weight', 'vision_model.encoder.layers.1.self_attn.out_proj.bias', 'vision_model.encoder.layers.0.self_attn.out_proj.bias', 'vision_model.encoder.layers.9.self_attn.v_proj.bias', 'vision_model.encoder.layers.11.self_attn.q_proj.bias', 'vision_model.encoder.layers.5.self_attn.v_proj.weight', 'vision_model.encoder.layers.6.self_attn.k_proj.bias', 'vision_model.encoder.layers.11.layer_norm2.bias', 'vision_model.encoder.layers.11.mlp.fc2.bias', 'vision_model.encoder.layers.1.self_attn.k_proj.bias', 'vision_model.encoder.layers.8.self_attn.k_proj.bias', 'vision_model.encoder.layers.1.self_attn.v_proj.weight', 'vision_model.encoder.layers.8.layer_norm2.bias', 'vision_model.encoder.layers.5.layer_norm1.bias', 'vision_model.encoder.layers.2.layer_norm1.bias', 'vision_model.encoder.layers.9.mlp.fc1.bias', 'vision_model.encoder.layers.10.self_attn.out_proj.bias', 'vision_model.encoder.layers.9.self_attn.out_proj.weight', 'vision_model.encoder.layers.1.self_attn.out_proj.weight', 'vision_model.embeddings.position_ids', 'vision_model.encoder.layers.10.mlp.fc2.weight', 'vision_model.encoder.layers.2.layer_norm2.weight', 'vision_model.encoder.layers.11.self_attn.k_proj.bias', 'vision_model.encoder.layers.7.layer_norm1.weight', 'vision_model.encoder.layers.7.self_attn.q_proj.bias', 'vision_model.encoder.layers.7.self_attn.out_proj.weight', 'vision_model.encoder.layers.0.layer_norm1.bias', 'vision_model.encoder.layers.3.layer_norm2.bias', 'vision_model.encoder.layers.5.layer_norm2.bias', 'vision_model.encoder.layers.7.self_attn.k_proj.weight', 'vision_model.encoder.layers.10.self_attn.v_proj.weight', 'vision_model.encoder.layers.1.layer_norm2.bias', 'vision_model.encoder.layers.0.self_attn.k_proj.weight', 'vision_model.encoder.layers.2.mlp.fc2.weight', 'vision_model.encoder.layers.5.self_attn.q_proj.bias', 'vision_model.encoder.layers.1.layer_norm1.weight', 'vision_model.encoder.layers.7.mlp.fc2.bias', 'logit_scale', 'vision_model.encoder.layers.10.self_attn.v_proj.bias', 'vision_model.encoder.layers.11.self_attn.k_proj.weight', 'vision_model.encoder.layers.11.self_attn.out_proj.bias', 'vision_model.encoder.layers.1.mlp.fc2.bias', 'vision_model.encoder.layers.5.layer_norm2.weight', 'vision_model.encoder.layers.8.mlp.fc1.bias', 'vision_model.encoder.layers.11.mlp.fc2.weight', 'vision_model.encoder.layers.11.self_attn.v_proj.bias', 'vision_model.encoder.layers.7.self_attn.v_proj.bias', 'vision_model.encoder.layers.10.layer_norm1.bias', 'vision_model.encoder.layers.6.layer_norm1.weight', 'vision_model.encoder.layers.5.self_attn.out_proj.bias', 'vision_model.encoder.layers.0.self_attn.v_proj.bias', 'vision_model.encoder.layers.1.self_attn.k_proj.weight', 'vision_model.encoder.layers.2.self_attn.q_proj.weight', 'vision_model.encoder.layers.7.self_attn.q_proj.weight', 'text_projection.weight', 'vision_model.encoder.layers.8.mlp.fc1.weight', 'vision_model.encoder.layers.3.self_attn.k_proj.weight', 'vision_model.encoder.layers.11.layer_norm1.weight', 'vision_model.encoder.layers.8.self_attn.v_proj.weight', 'vision_model.post_layernorm.bias', 'vision_model.encoder.layers.0.self_attn.k_proj.bias', 'vision_model.encoder.layers.7.mlp.fc2.weight', 'vision_model.encoder.layers.0.self_attn.v_proj.weight', 'vision_model.encoder.layers.10.self_attn.q_proj.weight', 'vision_model.encoder.layers.2.mlp.fc1.weight', 'vision_model.encoder.layers.9.self_attn.q_proj.bias', 'vision_model.encoder.layers.10.mlp.fc2.bias', 'vision_model.encoder.layers.4.self_attn.k_proj.bias', 'vision_model.encoder.layers.9.layer_norm2.weight', 'vision_model.encoder.layers.8.self_attn.q_proj.weight', 'vision_model.encoder.layers.8.self_attn.k_proj.weight', 'vision_model.encoder.layers.1.self_attn.q_proj.weight', 'vision_model.encoder.layers.7.layer_norm1.bias', 'vision_model.encoder.layers.8.self_attn.v_proj.bias', 'vision_model.encoder.layers.1.layer_norm2.weight', 'vision_model.encoder.layers.10.mlp.fc1.bias', 'vision_model.encoder.layers.0.layer_norm2.weight', 'vision_model.encoder.layers.2.self_attn.out_proj.bias', 'vision_model.encoder.layers.4.layer_norm1.bias', 'vision_model.encoder.layers.3.self_attn.v_proj.bias', 'vision_model.encoder.layers.9.self_attn.k_proj.bias', 'vision_model.encoder.layers.10.layer_norm2.weight', 'vision_model.encoder.layers.7.layer_norm2.bias', 'vision_model.encoder.layers.8.self_attn.out_proj.bias', 'vision_model.encoder.layers.2.mlp.fc1.bias', 'vision_model.encoder.layers.5.self_attn.out_proj.weight', 'vision_model.encoder.layers.4.mlp.fc1.weight', 'vision_model.encoder.layers.11.layer_norm1.bias', 'vision_model.encoder.layers.1.mlp.fc2.weight', 'vision_model.encoder.layers.3.self_attn.q_proj.weight', 'vision_model.encoder.layers.11.layer_norm2.weight', 'vision_model.encoder.layers.9.mlp.fc2.bias', 'vision_model.encoder.layers.8.mlp.fc2.bias', 'vision_model.encoder.layers.4.self_attn.v_proj.weight', 'vision_model.encoder.layers.11.mlp.fc1.weight', 'vision_model.encoder.layers.10.self_attn.out_proj.weight', 'vision_model.encoder.layers.4.self_attn.q_proj.bias', 'vision_model.encoder.layers.10.layer_norm2.bias', 'vision_model.encoder.layers.2.self_attn.out_proj.weight', 'vision_model.embeddings.position_embedding.weight', 'vision_model.encoder.layers.7.self_attn.out_proj.bias', 'vision_model.encoder.layers.4.self_attn.out_proj.weight', 'vision_model.encoder.layers.1.mlp.fc1.bias', 'vision_model.encoder.layers.0.self_attn.q_proj.bias', 'vision_model.post_layernorm.weight', 'vision_model.encoder.layers.2.self_attn.k_proj.bias', 'vision_model.encoder.layers.2.self_attn.v_proj.bias', 'vision_model.encoder.layers.9.layer_norm2.bias', 'vision_model.encoder.layers.9.self_attn.k_proj.weight', 'vision_model.encoder.layers.2.self_attn.q_proj.bias', 'vision_model.encoder.layers.9.self_attn.v_proj.weight', 'vision_model.encoder.layers.10.self_attn.k_proj.weight', 'vision_model.encoder.layers.5.layer_norm1.weight', 'vision_model.encoder.layers.5.self_attn.k_proj.weight', 'vision_model.encoder.layers.7.self_attn.k_proj.bias', 'vision_model.embeddings.class_embedding', 'vision_model.encoder.layers.4.mlp.fc2.bias', 'vision_model.encoder.layers.2.self_attn.k_proj.weight', 'vision_model.encoder.layers.4.mlp.fc1.bias', 'vision_model.encoder.layers.6.self_attn.q_proj.bias', 'vision_model.encoder.layers.3.mlp.fc1.bias', 'vision_model.encoder.layers.11.self_attn.out_proj.weight', 'vision_model.encoder.layers.11.self_attn.q_proj.weight', 'vision_model.encoder.layers.3.self_attn.v_proj.weight', 'vision_model.encoder.layers.6.self_attn.q_proj.weight', 'vision_model.encoder.layers.8.layer_norm2.weight', 'vision_model.encoder.layers.11.self_attn.v_proj.weight', 'vision_model.encoder.layers.4.mlp.fc2.weight', 'vision_model.encoder.layers.8.layer_norm1.weight', 'vision_model.encoder.layers.8.self_attn.q_proj.bias', 'vision_model.encoder.layers.10.self_attn.q_proj.bias', 'vision_model.encoder.layers.5.self_attn.k_proj.bias', 'vision_model.encoder.layers.0.self_attn.q_proj.weight', 'vision_model.encoder.layers.4.self_attn.q_proj.weight', 'vision_model.encoder.layers.4.self_attn.k_proj.weight', 'vision_model.encoder.layers.4.layer_norm2.bias', 'vision_model.encoder.layers.0.mlp.fc2.weight', 'vision_model.encoder.layers.6.self_attn.v_proj.weight', 'vision_model.encoder.layers.6.layer_norm2.bias', 'vision_model.encoder.layers.2.self_attn.v_proj.weight', 'vision_model.encoder.layers.5.self_attn.v_proj.bias', 'vision_model.encoder.layers.1.self_attn.v_proj.bias', 'vision_model.encoder.layers.2.layer_norm1.weight', 'vision_model.encoder.layers.1.layer_norm1.bias', 'vision_model.encoder.layers.3.self_attn.q_proj.bias', 'vision_model.embeddings.patch_embedding.weight', 'vision_model.encoder.layers.1.mlp.fc1.weight', 'vision_model.encoder.layers.6.layer_norm2.weight', 'vision_model.encoder.layers.10.self_attn.k_proj.bias', 'vision_model.encoder.layers.0.layer_norm1.weight', 'vision_model.encoder.layers.2.layer_norm2.bias', 'vision_model.pre_layrnorm.weight', 'vision_model.encoder.layers.0.layer_norm2.bias', 'vision_model.encoder.layers.6.self_attn.k_proj.weight', 'vision_model.encoder.layers.5.self_attn.q_proj.weight', 'vision_model.encoder.layers.3.mlp.fc2.bias', 'vision_model.encoder.layers.9.self_attn.out_proj.bias', 'vision_model.encoder.layers.9.layer_norm1.weight', 'vision_model.encoder.layers.7.mlp.fc1.weight', 'vision_model.encoder.layers.7.mlp.fc1.bias', 'vision_model.encoder.layers.8.self_attn.out_proj.weight', 'vision_model.encoder.layers.0.mlp.fc1.weight', 'vision_model.encoder.layers.10.layer_norm1.weight', 'vision_model.encoder.layers.4.self_attn.v_proj.bias', 'vision_model.encoder.layers.3.mlp.fc2.weight', 'vision_model.encoder.layers.9.self_attn.q_proj.weight', 'vision_model.encoder.layers.5.mlp.fc1.bias', 'vision_model.encoder.layers.3.mlp.fc1.weight', 'vision_model.encoder.layers.6.mlp.fc2.weight']
- This IS expected if you are initializing CLIPTextModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing CLIPTextModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
instantiated sampler
instantiating dataloader
Some weights of the model checkpoint at openai/clip-vit-base-patch32 were not used when initializing CLIPVisionModel: ['text_model.encoder.layers.6.mlp.fc2.weight', 'text_model.encoder.layers.7.layer_norm1.weight', 'text_model.encoder.layers.5.self_attn.k_proj.weight', 'text_model.encoder.layers.7.mlp.fc2.weight', 'text_model.encoder.layers.3.self_attn.q_proj.bias', 'text_model.encoder.layers.8.self_attn.k_proj.weight', 'visual_projection.weight', 'text_model.encoder.layers.0.layer_norm1.weight', 'text_model.encoder.layers.1.mlp.fc2.bias', 'text_model.encoder.layers.5.mlp.fc1.bias', 'text_model.encoder.layers.5.mlp.fc2.weight', 'text_model.encoder.layers.1.self_attn.k_proj.weight', 'text_model.encoder.layers.9.self_attn.q_proj.weight', 'text_model.encoder.layers.5.self_attn.v_proj.weight', 'text_model.encoder.layers.0.self_attn.out_proj.weight', 'text_model.encoder.layers.3.mlp.fc1.weight', 'text_model.encoder.layers.6.self_attn.q_proj.weight', 'text_model.encoder.layers.8.layer_norm2.bias', 'text_model.encoder.layers.1.self_attn.out_proj.weight', 'text_model.encoder.layers.10.self_attn.v_proj.weight', 'text_model.encoder.layers.5.self_attn.out_proj.bias', 'text_model.encoder.layers.3.self_attn.v_proj.weight', 'text_model.encoder.layers.10.mlp.fc2.weight', 'text_model.encoder.layers.3.self_attn.v_proj.bias', 'text_model.encoder.layers.6.layer_norm1.bias', 'text_model.encoder.layers.3.self_attn.k_proj.bias', 'text_model.encoder.layers.11.self_attn.q_proj.weight', 'text_model.encoder.layers.5.self_attn.q_proj.bias', 'text_model.encoder.layers.4.mlp.fc1.bias', 'text_model.encoder.layers.0.layer_norm2.weight', 'text_model.encoder.layers.1.layer_norm1.weight', 'text_model.encoder.layers.0.self_attn.k_proj.bias', 'text_model.encoder.layers.11.self_attn.k_proj.bias', 'text_model.encoder.layers.9.layer_norm1.bias', 'text_model.encoder.layers.1.self_attn.k_proj.bias', 'text_model.embeddings.position_ids', 'text_model.encoder.layers.4.self_attn.q_proj.weight', 'text_model.encoder.layers.4.self_attn.v_proj.weight', 'text_model.encoder.layers.10.layer_norm1.bias', 'text_model.encoder.layers.2.mlp.fc2.weight', 'text_model.encoder.layers.10.layer_norm2.bias', 'text_model.encoder.layers.7.mlp.fc1.bias', 'text_model.encoder.layers.8.self_attn.out_proj.weight', 'text_model.encoder.layers.6.self_attn.out_proj.weight', 'text_model.encoder.layers.11.layer_norm1.weight', 'text_model.encoder.layers.10.self_attn.q_proj.weight', 'text_model.encoder.layers.2.mlp.fc1.bias', 'text_model.encoder.layers.0.self_attn.out_proj.bias', 'text_model.encoder.layers.2.layer_norm2.weight', 'text_model.encoder.layers.6.self_attn.v_proj.weight', 'text_model.encoder.layers.7.layer_norm2.weight', 'text_model.encoder.layers.10.self_attn.out_proj.bias', 'text_model.encoder.layers.4.self_attn.out_proj.bias', 'text_model.encoder.layers.11.layer_norm2.weight', 'text_model.encoder.layers.2.self_attn.out_proj.weight', 'text_model.encoder.layers.9.self_attn.k_proj.bias', 'text_model.encoder.layers.2.self_attn.out_proj.bias', 'text_model.encoder.layers.3.self_attn.q_proj.weight', 'text_model.encoder.layers.9.mlp.fc1.weight', 'text_model.encoder.layers.0.self_attn.v_proj.weight', 'text_model.encoder.layers.4.self_attn.k_proj.bias', 'text_model.encoder.layers.5.self_attn.v_proj.bias', 'text_model.encoder.layers.11.self_attn.q_proj.bias', 'text_model.encoder.layers.5.mlp.fc2.bias', 'text_model.encoder.layers.11.mlp.fc2.weight', 'text_model.encoder.layers.7.self_attn.v_proj.weight', 'text_model.encoder.layers.1.mlp.fc1.bias', 'text_model.embeddings.position_embedding.weight', 'text_model.encoder.layers.10.self_attn.k_proj.weight', 'logit_scale', 'text_model.encoder.layers.2.self_attn.k_proj.weight', 'text_model.encoder.layers.11.self_attn.v_proj.weight', 'text_model.encoder.layers.1.mlp.fc2.weight', 'text_model.encoder.layers.5.self_attn.out_proj.weight', 'text_model.encoder.layers.3.layer_norm2.weight', 'text_model.encoder.layers.8.self_attn.out_proj.bias', 'text_model.encoder.layers.4.self_attn.q_proj.bias', 'text_model.encoder.layers.6.mlp.fc1.bias', 'text_model.encoder.layers.8.self_attn.k_proj.bias', 'text_model.encoder.layers.0.mlp.fc2.bias', 'text_model.encoder.layers.5.layer_norm2.bias', 'text_model.encoder.layers.1.self_attn.q_proj.weight', 'text_model.encoder.layers.1.mlp.fc1.weight', 'text_model.encoder.layers.7.layer_norm1.bias', 'text_model.encoder.layers.10.self_attn.v_proj.bias', 'text_model.encoder.layers.7.self_attn.q_proj.weight', 'text_model.encoder.layers.8.mlp.fc2.weight', 'text_projection.weight', 'text_model.encoder.layers.4.self_attn.out_proj.weight', 'text_model.encoder.layers.0.self_attn.v_proj.bias', 'text_model.encoder.layers.8.layer_norm2.weight', 'text_model.encoder.layers.2.self_attn.q_proj.bias', 'text_model.encoder.layers.7.self_attn.v_proj.bias', 'text_model.encoder.layers.3.self_attn.out_proj.bias', 'text_model.encoder.layers.3.layer_norm1.bias', 'text_model.encoder.layers.5.mlp.fc1.weight', 'text_model.encoder.layers.3.layer_norm2.bias', 'text_model.encoder.layers.10.layer_norm1.weight', 'text_model.encoder.layers.8.mlp.fc2.bias', 'text_model.encoder.layers.6.layer_norm2.bias', 'text_model.encoder.layers.4.mlp.fc1.weight', 'text_model.encoder.layers.2.self_attn.q_proj.weight', 'text_model.encoder.layers.11.self_attn.v_proj.bias', 'text_model.encoder.layers.6.mlp.fc2.bias', 'text_model.encoder.layers.1.layer_norm1.bias', 'text_model.encoder.layers.5.layer_norm2.weight', 'text_model.encoder.layers.6.self_attn.q_proj.bias', 'text_model.encoder.layers.7.self_attn.out_proj.bias', 'text_model.encoder.layers.7.mlp.fc1.weight', 'text_model.encoder.layers.4.layer_norm2.bias', 'text_model.encoder.layers.5.self_attn.q_proj.weight', 'text_model.encoder.layers.4.layer_norm1.bias', 'text_model.encoder.layers.2.mlp.fc1.weight', 'text_model.encoder.layers.2.self_attn.v_proj.bias', 'text_model.encoder.layers.2.layer_norm1.weight', 'text_model.encoder.layers.8.mlp.fc1.bias', 'text_model.encoder.layers.1.self_attn.out_proj.bias', 'text_model.encoder.layers.11.layer_norm2.bias', 'text_model.final_layer_norm.weight', 'text_model.encoder.layers.1.self_attn.v_proj.weight', 'text_model.encoder.layers.6.self_attn.k_proj.bias', 'text_model.encoder.layers.9.layer_norm2.weight', 'text_model.encoder.layers.8.layer_norm1.bias', 'text_model.encoder.layers.5.layer_norm1.weight', 'text_model.encoder.layers.11.mlp.fc2.bias', 'text_model.encoder.layers.9.mlp.fc2.weight', 'text_model.encoder.layers.3.self_attn.out_proj.weight', 'text_model.encoder.layers.9.self_attn.q_proj.bias', 'text_model.encoder.layers.4.mlp.fc2.weight', 'text_model.encoder.layers.2.layer_norm2.bias', 'text_model.encoder.layers.0.self_attn.q_proj.bias', 'text_model.encoder.layers.8.self_attn.v_proj.bias', 'text_model.encoder.layers.7.mlp.fc2.bias', 'text_model.encoder.layers.9.mlp.fc2.bias', 'text_model.encoder.layers.10.self_attn.q_proj.bias', 'text_model.encoder.layers.7.self_attn.out_proj.weight', 'text_model.encoder.layers.1.self_attn.q_proj.bias', 'text_model.encoder.layers.3.mlp.fc2.weight', 'text_model.encoder.layers.0.mlp.fc2.weight', 'text_model.encoder.layers.11.self_attn.out_proj.bias', 'text_model.encoder.layers.3.self_attn.k_proj.weight', 'text_model.encoder.layers.4.layer_norm2.weight', 'text_model.encoder.layers.6.self_attn.out_proj.bias', 'text_model.encoder.layers.10.self_attn.k_proj.bias', 'text_model.encoder.layers.8.mlp.fc1.weight', 'text_model.encoder.layers.6.layer_norm2.weight', 'text_model.encoder.layers.7.layer_norm2.bias', 'text_model.encoder.layers.3.mlp.fc2.bias', 'text_model.encoder.layers.11.mlp.fc1.bias', 'text_model.encoder.layers.4.layer_norm1.weight', 'text_model.encoder.layers.6.mlp.fc1.weight', 'text_model.encoder.layers.7.self_attn.k_proj.bias', 'text_model.encoder.layers.6.self_attn.v_proj.bias', 'text_model.encoder.layers.0.layer_norm2.bias', 'text_model.encoder.layers.9.layer_norm2.bias', 'text_model.encoder.layers.0.mlp.fc1.bias', 'text_model.encoder.layers.2.layer_norm1.bias', 'text_model.encoder.layers.8.self_attn.v_proj.weight', 'text_model.encoder.layers.9.self_attn.out_proj.bias', 'text_model.encoder.layers.11.self_attn.out_proj.weight', 'text_model.encoder.layers.5.layer_norm1.bias', 'text_model.encoder.layers.8.self_attn.q_proj.weight', 'text_model.encoder.layers.10.mlp.fc2.bias', 'text_model.encoder.layers.4.self_attn.v_proj.bias', 'text_model.encoder.layers.11.mlp.fc1.weight', 'text_model.encoder.layers.7.self_attn.q_proj.bias', 'text_model.encoder.layers.1.layer_norm2.bias', 'text_model.encoder.layers.3.layer_norm1.weight', 'text_model.encoder.layers.9.self_attn.out_proj.weight', 'text_model.encoder.layers.11.layer_norm1.bias', 'text_model.encoder.layers.7.self_attn.k_proj.weight', 'text_model.encoder.layers.5.self_attn.k_proj.bias', 'text_model.encoder.layers.9.mlp.fc1.bias', 'text_model.encoder.layers.0.mlp.fc1.weight', 'text_model.encoder.layers.9.layer_norm1.weight', 'text_model.encoder.layers.10.layer_norm2.weight', 'text_model.encoder.layers.1.self_attn.v_proj.bias', 'text_model.encoder.layers.0.self_attn.q_proj.weight', 'text_model.encoder.layers.4.self_attn.k_proj.weight', 'text_model.encoder.layers.2.mlp.fc2.bias', 'text_model.encoder.layers.10.mlp.fc1.weight', 'text_model.encoder.layers.10.self_attn.out_proj.weight', 'text_model.final_layer_norm.bias', 'text_model.embeddings.token_embedding.weight', 'text_model.encoder.layers.9.self_attn.k_proj.weight', 'text_model.encoder.layers.8.self_attn.q_proj.bias', 'text_model.encoder.layers.4.mlp.fc2.bias', 'text_model.encoder.layers.10.mlp.fc1.bias', 'text_model.encoder.layers.2.self_attn.v_proj.weight', 'text_model.encoder.layers.8.layer_norm1.weight', 'text_model.encoder.layers.11.self_attn.k_proj.weight', 'text_model.encoder.layers.9.self_attn.v_proj.weight', 'text_model.encoder.layers.6.layer_norm1.weight', 'text_model.encoder.layers.6.self_attn.k_proj.weight', 'text_model.encoder.layers.0.self_attn.k_proj.weight', 'text_model.encoder.layers.0.layer_norm1.bias', 'text_model.encoder.layers.3.mlp.fc1.bias', 'text_model.encoder.layers.2.self_attn.k_proj.bias', 'text_model.encoder.layers.1.layer_norm2.weight', 'text_model.encoder.layers.9.self_attn.v_proj.bias']
- This IS expected if you are initializing CLIPVisionModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing CLIPVisionModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
/home/aneesh/github/slot_vqa/train.py:293: UserWarning: torch.nn.utils.clip_grad_norm is now deprecated in favor of torch.nn.utils.clip_grad_norm_.
  torch.nn.utils.clip_grad_norm(model.parameters(), args.clip)
pred===========================> tensor([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11], device='cuda:0')
target=============================> tensor([  8,  17,  18,  31,  73,  75,   7,  43,  28,  78,  84,  40,  16,  11,
          7,  16,  21,  88,  60,  62,   2,   6,   7, 101,  47,  44,  85,  31,
         43,  19,  78,  39,  76,  93,  31,  10,   5,  40,  59,  49,  90,   4,
         37,   4,  44,   7,   7,  38,  26,  49,   7,  44,   3,  77,  90,  28,
         77,  16,  34,  63,  47, 106,  79,  37, 103,  16,  56,  99,  79,  95,
         23,  11, 104,  82,  37, 103,  42,  14,   3,  79,  27,  57,  82,  69,
         84,  65,  73,  59, 104,  35,  52,  87,  35,  33,  25,   7,  44,  96,
         57,  82,   0,  80,  97,  91,  89,  14,  41,  98,  23,  64,   9,   6,
          7,   1,   2,  53, 102,  87,  97,  80,  90,  59,  24,   0,  35, 103,
         53,   8,  80,  22,   1,  89,   7,  51,  90,  40,  73,  46, 101,  20,
        102,   7,  73,  60,   4,  83,  16,  23,  77,  69,  27,  75,  59,  31,
         79, 103,  80,   9,  90,  65,  87,  93,  49,  63,  11,  96,  11,   6,
         49,  55,  36,  34,  82,  22,   4,  57,  86,  96,  24,  80,  47,  28,
         90,  62,  47,  16,  18, 106,  98,  84,  88,  35,  42,  62,  16,  54,
          3,   0,   6,   7,  99,  20,   0,  26,  67,  71,  53,  11, 103,  22,
         16, 102, 101,  17,  30,  64, 104,  81,   8,  10,   8,  32,  75,  43,
         88,   0,  55,  12,  90,  29,  73,  43,  41,  40,  76,  61,  57,  51,
         93,  85,   9, 103,   1,  27,  55,  90,  31,   6,  12,  34,  84,  90,
         16,   0,  39,  31], device='cuda:0')
pred===========================> tensor([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11], device='cuda:0')
target=============================> tensor([ 66,  76,   0, 102,   6,  30, 103,  30,  44,   0,  77,  58,  44,  45,
          7,  51,   6,   0,   2,  84, 105,  16,  70,  60,  39,   0, 105,  19,
         42,   5,  79,  17,  55,  89,  61,  68,  58,  17,  91,  45,  22,   9,
         69,  55,  16,  68,   7,  55,  24,  95,  68, 106,  97,  95,  54,  14,
        100,  90,  90,  31, 100,  59,  47,  75,  88,  64,  38,  55, 102,  93,
        102,  80,  45,  22,  39,  49,   7,  92,  39,   3,  75,  85,  59,  79,
         16,  40,  16,  48,  64,  99, 103,  58,  22,  86,   0,   3,   7,  95,
         20,  65,  85,  19,  23,   6,   0,  75,   6,  84,  37,  11,  61,  20,
         85,  78,  85,  37,  62,  98,  57,  73,   8,   0,  90,  19,  31,  95,
         89,  97,  74,  50,  94,  91,  12,  62,  91,  66,  57,  79,  23,   2,
        102,  86,  16,  62,  53,  79,  57,  21,  95,  64,  99,   8,  72,  31,
         63,  62,   0,  59,  12,  68,  30,  97,  60,  32,  80,  51,  71,  48,
         68,  22,   6,  23,  74,  29,  95,   7,  50,  62,  46,  32,  68,  74,
        103,   7,  17,  58,  39,  96,  68,  35,  24,  83,  42,  75,  93,  95,
         75,   0,  15,  19, 105,   6,   6,  38, 104,  74,  44,   2,  46,  34,
         36,   0,  72,  67, 100,  20,  39,  91,  18,  49,   7,  20,  15, 103,
         33, 104,   3,  77,   0,   2,  16,  55, 102,  58,  87,  46,  61,  68,
          7,  97,  35,  36,  24, 104,  33,  43,  47,  10,  65,   0,  85,   7,
          7,  24,  72,  62], device='cuda:0')
pred===========================> tensor([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11], device='cuda:0')
target=============================> tensor([ 25,  22,  90,  90,  67,  73,   6,  44,  73,  90,  58,  17,   5,  83,
        103,  86,  14,  37,  42,  90,  49,  23,  22,  52,  90,  23,  79,  38,
         16,  40,  38,  11,   0,  76, 101,  43,   7,  69,  47,  70,  39,  64,
         97,  30,   0,  75,  74,  93,  75,  13,  14,  52,   0,  91,  59, 105,
          6,  89,  71,  53, 100, 102,   7,  36,  14,   7,  90,  93,  21,  28,
          0,  31,  72,  35,  29,  36,  45,  90,  53, 101,  63, 104,  22,   7,
         36,  55,  19,  37,   6,  72,   5,  41,  96,  45, 102,  90,  20,  13,
         69,  52,  58,  32,  90,  23,  16,  42,   0,  32,  28,  65,  49,  34,
         99,  49,  55,   6,  84,  16,  79,   0,  88,  87,  88,  11,  42,   7,
        106,  90,  58,  90,  44,  16,  24,  10,  98,  63,  16,  81,  28,  51,
         59,  51,  93,   0,  56,  62,  56,  48,  34,  36,  10,   3,  70,   9,
          0,  69,  90,  31,  78,   3,  14,  15,   9,   0,  11, 101,   2,  43,
         46,  50,  29,  61,  14,  29,   7,  98,  17,   0,  41,  19,  47,  70,
         28,  88,  88,   7,  42,  68,  94, 102,  33, 104,  73,  99,  75,  90,
         85,  70,   2,   7,  41,  28,  18,   0,  20,   0,  16,  88,  92,  55,
         29,   8,   3,  84,  23, 100,   3,  63,  78, 103,  23,  41,  36,  16,
         87,  45,  24,  77,   0,  53,  30,  79,  56,  84,  82,  51,   0,   4,
        106,   7,  55,  11,  38,  70,  76,  57,   7,  86,  38,   7,  28,  90,
         16,   2,   7,  78], device='cuda:0')
pred===========================> tensor([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11], device='cuda:0')
target=============================> tensor([105,   7,  41,  77,  90,  63,  57,  49,  59,  65, 100, 103,   7,  70,
         74,  24,  12,  44, 101,  16,  62,  10,  61,   1,   6,   3,  90,   9,
         39,  82,  66,  58,  32,  47,  53,  34,  48,  16,  97,   0,  45, 102,
          5,  18, 105,  97,  25,  49,  98,  40,   9,  51,  28,   6,  14,  86,
         46,  93,   5,  41,   5,   6,  11,  19,  45,  39,  32,   6,  97,  38,
         89,  98,  18,  48,  57,  49,  27,  98,  41, 100,   6,  74, 100,  77,
         53,  80,  99,   3,  46,   9,  61,   7,  27,  59,   0,  10,  22,  82,
         66,  20,   6,  46, 104,  44,  38,   0,  53,  85,   0,  78,  41,  56,
         79,   7,  16,  24,  42,  86,  37,  20,  63,  11,  32,   4,   5,  93,
         73,   0,  25,  76,   5,  47,  53,  61,  60,  90,   6,  40,  12,  10,
         41,   0,  90,   6,  99,   2,  89,  67,   0,   9,  29,  74,  21,   6,
        103,  18,  16,  18,   7,  19,  25, 103,  21,  55,  90,  50,  66,  60,
         18,  36,  78,  92,  48,  51,  33,  32,  47,  29,   5,  57,  35,  35,
         67,  81,  56,  23,  27,  86, 103,  98,  18,  20,  96,  90,  58,   7,
         40,  59,  65,  26,  69,  68,  90,  88,  89,  34,  72,  25,  92,  90,
         35,  93,  84,  27, 105,  81,  21,   2,  93,   9,   6,  19,  44,  33,
         62, 101,  88,  26, 100,  88,  39,  81,  22,   0,  92,  82,  36,  65,
         90,  99,  11,  82,  28,  17,  42,   9,   1,  87,  59,  85,  16,   6,
         60, 101,  16,  83], device='cuda:0')
pred===========================> tensor([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11], device='cuda:0')
target=============================> tensor([ 81,  99,  33,  91,  47,   4,  75,  90,  48,  10,   7,  48,  25,  95,
         24,  72,  19,  66,  85,  42,  49,  38,  22,  83,  16,  54,   2,  74,
         40,  92, 102,  57, 105,  77,  93, 106,  65,  48,  82,  22,  38,  41,
         93,  89,  90,  14,  27,  52,  84,  94,  54,  53,  65,  82,  57,  16,
         19,  10,  38,  98,  79,  47, 103,  38,  14,  37,  20,  39,  54,  17,
         57,  99,  95,   6, 102,  40,  25,  90,  37,  88,  31,  90,  89,  19,
         95,  16,  80,   3,   9,  93,   7,  30,  26,  76,   7,  48,  98,   6,
         90,  22,  39,   8,   7,  10,   7,  69,   0,  61,  84,  41,  91,  90,
         86,  99,   9,  14,   6,  67,  97,  42,  83,  41, 100,  25,  98,  89,
         65,   0,  52,  71,   5,  58,   7, 100, 102,  58,  50, 104, 103, 105,
          7,  51,  32,  43,   5,   0,  88,  28,  26,  56,  37,  44,  43,  57,
         16,   5,  10,  16, 100,  24,  23,  35, 100,   3,   7,  50,  84,  20,
         91,  24,  24,  25,  41,  70,  93,   8,  50,  97,  51,   5,  99,  19,
         84, 102,  64,  43,  66,  10,  90,  78,   7,  59,  33, 106,   7,  96,
         24,  92,  50,  75,  22,  48,  27,   7,  50,  69,  87,  44,  77,  37,
          6,  61,  55,  43,  58,  71,  81,  90,  85,  20,  14, 101,  11,  67,
         30,  30,  62,  37,  28,   6,  32,  27,  39,  69,   4, 100,   1,  28,
         43,  69, 106,  70,  33,  82,  90,  96,  79,   5,  16,  94,  44,  73,
         52, 106,  90,   0], device='cuda:0')
pred===========================> tensor([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11], device='cuda:0')
target=============================> tensor([ 19,  33,  87,  58,  16,  30,  47,  52,  23,  53,  48,  12,  41, 101,
          6,  14,  90,  22,   6,  84,   7,  39,  24,  13,  21,  16,  45,  20,
         70,  46,  16,  77,  73,   8,  17,  16,  27,  71,  58,  83,  56,  55,
         41,  59,  91,  51,  60,  90,   7,  48,  42,  90,  86,   2,  90, 101,
         17,  12,  92,  72,  71,  16,  22,  60,   7,  83,  17,  71,  52,  43,
         28, 103,  37, 101,  48, 101,  77,  17,  64,  55,  91,  35,  11, 103,
         63,  50,   5,   4,  94,  71,  79, 106,  66,  41,  90,  96,  90,  42,
         80,  68,   5,  55,  91, 103, 100,   6, 100,  80,  61, 104,  16,  90,
         65,   0,  18,  78,  89,  66,  70,  39,  68,  30,  66,  87,  90,  47,
         63,  18,  73,  76,  28,   1,  99,  77,  83,  94,  76,  18,  35,  19,
         90,  31,  49,  49,  75,  61,  71,  99,  20,  31,  64,  58, 104,   1,
         15,   7,  88,  51,  60,  84,  87,  44,  74,  88,  52,  98,  57,  46,
          0,  85,   6,  14,   6,   6,  16,   6,  92,  63,  49,  45,  90,  91,
          3,  83,  44,  89,  91,  43,  77,  61,  45,  25,  79,  63,  90,  72,
         91,  79,  63,  21,  69,  67,  67,  27,  55,  35,   6,  77,  16,  79,
         16,  66,  50,  77,   7,  22,   7,   5,  94,  37,  49,  88,   4,   7,
          8,  91,  49,  27,   1,  42,  82,   3,  44,  32,  53,  70,  99,  63,
         16,  90,  97,  46,  83,  27,  17,   6,  18,   0,  96,  12, 106,  47,
         81,  66,  88,  26], device='cuda:0')
pred===========================> tensor([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11], device='cuda:0')
target=============================> tensor([ 68,  39,  80,  19,  16,  38,  44,   2,  20, 105,  47,  82,  26,   0,
          6,  56,   6,   0,  81,  10,  84,  31, 103,   1,  16,  60,  83,  23,
        105,   3,  81,   0,  65,  47,  39,  50,  15,  51,  35,  20,  11,  22,
          9,  42, 102,  71,  72,  90,  75,  44,  49,  96,  45,  59,  33,  18,
         35,  50,  91,  16,  29,  62,   6,   0,  32,  16,  78,  99,  18,  22,
         73,  56,  16,  66,  33,  90,  34,   1,  85,  19,  15,   0,  31,  79,
         57,  20,  51,  58,  52,  27,  22,  99,  37,  44, 100,  40,  34,  67,
          6, 102,  52, 101,  24,  69,  48,  76, 101,  46,  31,  57,  37,  87,
         16,  76,  40,  13,  70,  86,  60,  17,  17,   1,   3,  79,  34,  70,
         71,  39,   2,   9,  41,  19,   7,  79,   8,  64,  20,  83,  99,  27,
         23,  89,   7,  26, 105,  58,  63,  11,  85,  85,  22,  62,  75,  16,
         17,  90,   0,  74,  91,   1,  19,   9,  90,   6, 105, 103,  22,   1,
          4,  19,  68,   1,  13,  37,   8,  57,  17,   2,  38,  50,  43, 102,
         96,   0,   7,  50,  62,  70,  55,  39,   7,  31, 106,  98,  19,  23,
          6,  30,  40,  13,  16,  55,  33,  18,  23,  78,  79,   3,  43,  30,
         55,  32,  25, 104,  41,  96,  85,  78,  44,  40,  84, 104,   0,  83,
         33,  89,  79,  34,   6,  88,  43,   6,  33,  34,  85,  33, 100,  98,
          2, 101,  60,  72,  35,  26,  96,  10,  31,  46,  87,  54,  58, 104,
         40,  76,  17,  93], device='cuda:0')
pred===========================> tensor([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11], device='cuda:0')
target=============================> tensor([ 46,  32,  61,  51, 106,  83,  93,  51,  69,  19,  15,  58,  24,  36,
         98,  19,  78,  43,  88,  93,  34,  33,  41,  59,  27,  97, 103,  35,
         67,   3,  17,  67,  39,  21,  16,  18,  73,  45,   8,  73,  56,  71,
         89, 101,  68,  23,  30, 100,   7,   2,  39,   5,  95,  39,  16,   6,
         56,  59,  83,  64,  90,  34,  20,  97,  98,  41,   0,  75,  75,  42,
         76,  22,  69,  91,  56, 102,  28,  19,   6,  77,  79,   2,  98,  71,
         26,  96,  76,  20,   9,  56,  37,  43,  38,  90,  23,  79,  14,  11,
         90,  50,  47,  59,  35,  90,  41,  43,  21,  37,  27,  56,  45,  82,
         55,  30,  37,   1,  16,  28,   4, 102,  74,  40,  33,  16,  49,  63,
         11,  35,  33,  71,  53,   8,  59,  98,  16,  86,  66, 103,  89,  46,
         47,  93,  89,  42,  16,  46,  39,  55,   5,  49,  24,  67,  29,   7,
         27,  60,  41,  84,  20,  37,  64,  41,   4,  90,  50,  95,  69,  86,
         89,  48,  95,   7, 104,  82,  81,   0,  40,  23,  63,  22,  49,  16,
         97,  89,  20,  41,  17,  49,  14,  88,  91,  78,  72,  19,  58,  79,
         31,  22,   3,  90,  91,   7,  78,  10,  61,  11,  90,  95,  63,   4,
         80,  52,  16,   9,  16,  87,  52,  77,  77,  55,  90,  69,  69,  92,
         21,  90,  27,  30,  84,  14,   0,   7,  10,  99,   7,  47,  10,   7,
         67,  82,  23,  90,  16,  90,   6,  53,  55,  49,  51,   0,  95,  31,
         75, 106,   7,   7], device='cuda:0')
pred===========================> tensor([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11], device='cuda:0')
target=============================> tensor([ 94,  16,  45,  66,   2,  35, 100,  84,  32, 101,  90,  73,  89,   1,
         36,  87,  99,   6,  62,  25,   1,  70,   7,  17,  16,  83,  60,  25,
        102,  20,  44,  73,   3,  49,  14,  36,   6,  78,  80,   5,  60,  79,
         26,   6,   6, 105,  58,  60,   7,  87,  58,  49,  59,  56,  33,  65,
         50,  46,  61,  58,  17,  14,  10,  24,   5,  93,  28,  42,  80,  45,
         46,  35,  46, 102,  37,   6,  51,   8,  76,  26,   1,  41,  11,  79,
         49,  77,  36,  84,  67,  48,  42,  77,  88,   0,  37,   6,  64,  95,
         18,  37,  16,  34, 104,  68,  35,  44,   7,  88,  13,  94,  43,  99,
         70,  64,  30,  68,  95,  26,   0,  80,  47, 101,   9,  14, 105, 105,
         64,  27, 100,  84,  49,  97,  48,  65,  87,  16,  53,  87,   7,  76,
         90,  72,  65,  75,  40,  86,  37,  16,  57,   8,  16,  65,  18,   1,
         76,  16,  40,  62,  89,  28,  21,  36,  67,  90,  45,  31,  90,  90,
         19,  96,  67,  83,  27,   8,  72,   7,   7,  84,  91,  16,  72,  52,
         82,  90,  82,  96,  42,   8,  71,  34,   0,   0,   7,   0, 103,  21,
         80,  64,  97,  82,  74,  29,  34,  73,  61,   9,  23,  46,  36,  53,
         82,  69,  90,  62,  28,  77, 104, 100,  17,   7,  34,  60,  42,  60,
          5,  90,  60,  39,  24,  34,  69,  85,  43, 100,   7,  75,  41,  98,
        103,  93,  40,  57,   4,  30,  58,  14,  85,  46,  16,  58,  97,  56,
         16,  68,  58,  41], device='cuda:0')
pred===========================> tensor([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11], device='cuda:0')
target=============================> tensor([ 10,  27,  22, 106,  16,  44,   6,   7,  30,   0,  88,  26,  52,  16,
         85,  57,  73,  15,   5,  50, 106,  52,  65,   1,  20,  78,  36,   5,
         55,  13,  20,  80,   7,   6,  48,  42,   0,  18,  34,  69,  86, 101,
         25,  27,  55,  13,  83,  43,  34,  20,  42,  72,  62,  19,  30,  56,
         29,  10,  41,  93,  93,  68,  16,  34,  16,   1,  33,  58,  16,  91,
         59,  31,  91,  19,  16,  45,  60,  14,  16,   6,  31,  88,   0,  84,
          7, 102,  38,  26,  91,  58,  58, 100,  92,  12,  66,  79, 104,  90,
         86,  26,  20,  46,  49, 106,  32,   3,  18, 104,  78, 102,  27, 106,
         89,  77,  22,  73,  60,  85,  11,  90,   1,  95,  47,  93,  99,  46,
          0,  75,  23,  97,  44,  40,  51,  38, 103,  31,  75,   9, 106,  68,
          0,  13,  28,  68,  65,   6,  16,  97,   7,  55,  28,  75, 103,  36,
         17, 104,  42,   7,  72,   1,   6,  54,  30,   2,  90,  98,  77,  36,
         73,  28,  51,  40, 103,  25,  49,  60,  13,   7,  47,  55,  33,  86,
         20,   7,   6,  14,  59,  61,   7,   0,  90,  57,  90,  30,  76,  31,
         77,  84,  20,  16,  17,  26,   8,  32,  87,   5,  16,  80,  16,  44,
         34,  87,  34,  89,   8,   5,  84,  73,   7,  59,  49,  25,  73,  55,
          3,  48,   7,  61,  53,  22,  33,  60, 106,   0, 103,  86, 100,   1,
         88,  70,  90,   4,   8,  39,  16,  38,  52,   5,  50,  90, 101,  74,
         21,  31,  72,  25], device='cuda:0')
pred===========================> tensor([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11], device='cuda:0')
target=============================> tensor([  0,  88,  82,  10,  73,   0,  42,  11, 102,  40,  87, 100,  85,   6,
         72,   7,  44, 100,  12,  97,  67,  55,  44,  14,  91,   6,  52,   3,
         61,  61,  83,  25,  73,  47,  23,   2,   5,  90,  39,  48,  40, 106,
         95,  42, 102,  98,   2, 102,  29,  90,  84,   4,   4,  52,  41,  25,
         98,   9,   7,   6,  26,  16,  62,  25,  22,  90, 101,   5,  70,   6,
         16, 105,  87,  36,   7,   9,  82,   0,  77,  42,  84,   1,  56,  77,
         81,  12,  65,   6,  69,  23,  77,   0,  25,  99,  43,  84,  45,  60,
         85,  45,   6,  16,  97,  30,  57,  67, 105,  14,  33,   9,  27, 101,
         35,  44,  14,   5,  14,   0,   8,  74,  44,  75,   4,  20,  70,  35,
         18,  26,  30,  70,   4,   6,  97,  46,  22,  21,  93,  36,  90,   0,
         75,  52,   6,  25,   8,  34,  60,  35,   7,  41,  49,   0,   2,  31,
         98,  69,  80,  69,  62,  83,   0,  16, 100, 103,  80,  56,  28,  33,
         46,  14,  84,  53,  68,   3,  99,  89,  69,  66,   6,   6,  30,  46,
          0,  96,  52,  67,  71,  53,  80,  31,  79,  28, 106,  74,  85,  40,
         71,   6,  65,   0,  65,  43,   0, 103,  65,  52,   2,  43,  20,  72,
         44,  33,  26,  39,  64,  39,  26,  84,  82,  48, 105,   0,  38,  93,
         22,  20,  19, 106,  38,  26,   8,  29,   3, 105,   5,  61,  16,  49,
         53,  42,  16,  64,   5,  16,  35,  41,  17,  91,   4,  34,  91,  48,
          7,  28,  20, 101], device='cuda:0')
pred===========================> tensor([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11], device='cuda:0')
target=============================> tensor([ 83,  56, 100,  63,   0,   8,  16,   6,  16,   5,  73, 102,  24,  26,
         93,  95,  20,  28,  57,   7,  88,  80,  50,   6,  78,  97,  14,  16,
         70,   7,  43,  56,   4,  16,  21,  94,  85,  53,  21,   7,   2,  90,
         89,  78,  46,  96,  29,  65,   6,   6,   7,  66,  10,  76,  28,  14,
         85,  40,  78,  48,  34,   9,  97,  72,  90,  31,  39, 103,  28,  60,
          3, 102,  63,  43,  82,  92,  19,  11,  37,  80,  50,  44,  58,   6,
         34,  18,  90,  90,  90,  61,  22,  50,   0,  74,  26,  16,  79,   6,
         63,  20,  90,  56,  15,   8,  90,  83,  15,  70,  60,  25,  47,  26,
         40,  57, 101,  74,  78,  74,  98,  63,  52,  49,  51,   7,  45,   6,
         47,  74,  82,  86,   9,  90,   7,  49,  91,  21,   6,  20,  90,   6,
         90,  83,  41,  11,  30,  66,  83,  30,  38,  86, 106, 103,  16,  70,
         77,  40,  83,  46,  73,  26,  98,  57,  25,   6,  31,  33,  73,  90,
         98,  55, 104,  18,   7,  55,  86,   6,  83,  36,  36, 100,  11,  90,
         36,   5,  75,   7,  53,  84,  95,  90,  40,  73,  48,   3, 106,  88,
         30,  36,  25,  16,   0,   0,  50,   5,   8,  96,  23,  80,  98,  85,
         38,  11, 101,  59,  16,  70,  78,  24,  28, 102,   7,  79,  68,  17,
        100,  58,   7,  21,  76,  66,  87,  13,  58,  16,  93,  67,   5,   7,
         73,  73,  87,  69,  52,  99,  14,  94,  72,  99,  97,  94,  62,  36,
         93,  25,  90, 105], device='cuda:0')
pred===========================> tensor([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11], device='cuda:0')
target=============================> tensor([ 51, 102,  70,  72,  26,   0,  48,  91,   6,   4,  56, 100,  48,   7,
         53,  13,  52,  98,   6,  30,   7,   6,  32,  61,  66,  74,  81,  20,
         62,  28,  68,  39,  40,   0,  55,   7,  58,   4,  88,  60,  31,  42,
          9,  47,  14,  20,  43,  10,  99,  28,   4,  49,  62,  35,  94,  86,
         60,  16, 101,  90,  85,  25,  20,  56, 105,   0,  81,   6,  79,  91,
         25,  89,   5,  11,  91,  32,   0,  95,  66,  15,  62,  67,   0,  90,
        106,  50,  55,  80,  92,   6,  76,  85,  59,  56,   2,  57,  46,  10,
          3,  67,   2,  29,  59,  60,  26,  34,  28,   0,  16,   0,  96,  83,
         15,  35,   5,  69,  40,  22,  77,  25,  76,  93,  35,  22,  71,   6,
         20,  72,  16,  50,  43,  90,  72, 103,  53,  96,  14,   5,  67,  21,
         91,  13, 102,  82,  50,  90,  26,  72,   0,  47,  67,  73,   0,  11,
         77,  43,  71, 104,  99,   9,  96,  28,  85,  68,  20,  47,  24,  55,
         36,  16,  64,  70,   5,   7,  60,   7,  27,  63,  99,  51,   1,  75,
         16,  75,  50,   0,  20,  90,   0,  10,  88,  47,  75,  11,  30,  79,
         76,  83,  34,  67,  17,  90,  68,  60,  48,  89,  75,  10,  79,  44,
         24,  53,  91,  23,  83,  73,  23,  45,  40,  29,  82,  39, 102,  35,
         14,  26,  90,  63,  81,  78,   9,   1,  13,  27,  95,  90,  88,   0,
         82,  35,  85,  31,  39,  55,  20,  53,  97,  39,  50,  61,  22,  22,
         72,  51,  70,   7], device='cuda:0')
pred===========================> tensor([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11], device='cuda:0')
target=============================> tensor([  0,   2,  75,  30,  29,  90,  96,  21,  39, 100,  86,  35, 105,  34,
         39,  57,   4,  17,   4,  58,  69,  26,   3,  96,  37,  93,  51,  62,
         95,   3,   8,  31,  13,  30,  70,  73,  76,  40,  43,   5,   8,   7,
         61,   7,  92,  54,  14,  99,  35,  49,  98,  29,  95, 104,  77,  38,
          7,  11, 101,   6,   6,  69,  13,  39,  89,  48,  12,   0,  90,   0,
         89,  36,   1,  63,  30,   3,  19,  16,  31,  70,  74,  16,  23,  37,
          7,  47,  16,  78,  16,  31,   1,  16,   0,  79,   0,  20,  53,  91,
         98,  89,  57,  66,  35,   3,   7,  74,  98,  17,   9,  34,  17,  24,
         30,  45,  68,  59,  80,  16,   6,  90,  70,   6,   7,  65,  17,   0,
         14, 105,   8,  63,  63,  58,  72,  69,   6,  56,   2,  98,  34,  39,
          2,  56,  46,  80,  55,  28,  98,   9,  92,  33,  51,  10, 101,  49,
          0,  44,   7,  13,   0, 100,   0,  49, 103,  90,  43,  37,  70,   2,
         55,  77,  61,  64,  75,  20,   6,  26,  19,  85,  25,   9,  46,  59,
         42,  67,  90,  97,   0,  21,   6,  35,  51,   8,  90,  62,  69,  54,
        105,  89,  21,   0,  25,   3,  69,  19,  49,   0,  93,  46,   6,   7,
         24,  29,  29, 100,  90,  49,  42,  38,   0,  59,  39,  74,   9,  61,
         80,  51,  61,  16,  36,  44,  80,  51,  90,  93,  39,   0,  98,  21,
         18,  25,   8,  25,  88,  61,  68,  96,  64,  48,  55,  47,  91,  53,
         19,  60,  56,  17], device='cuda:0')
pred===========================> tensor([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11], device='cuda:0')
target=============================> tensor([  7,  73, 104,  87,   5,  82,  79,  50,  38,  76,  45,  45,   0, 106,
         48,  76,  23,  28,  97,  84,  91,  97,  95,   7,  10, 101,  90,  52,
         10,   7,   0,   2,  55,   7, 102,   0,  58,  69,  14,  96,  20,   7,
         36,  46,   7, 106,   6,  88, 100,   0,  16,  73,  21,  82,  67,   9,
         21,  61,  16,  91,  21,  31,  22,  88,  44,  97,   6,  37,  39, 105,
         89,  13,  52,  45,  44, 101,  30,  57,  61,  83,  92,  61,  59,  37,
         48,  59,  76,  18,  14, 102,  67, 104,  43,  65,   6,  78,   2,  55,
         87,  26,   6,   4,  89,  52,  92,  90,  43,  42, 106,  92,   4,  87,
         79,  31,  25,  62,  77,  98,  55,  41,   3,  37, 106,  87, 103,  90,
          6,  69,  55,   4,   7, 100,  12,  82,  36,  75,  20,  60,  65,   7,
          0,  28,  85,  17,  38,  39,  75,  13,   4,   7,   9,  54,  51,  57,
         41,  85,  21,  47,   7,  23,  91,  46,  42,  19,  55,  89,  90,  35,
         97,  90,  48, 102,  15,  38,  88,   7,  43,  15,  66,  87,  26,  87,
         93, 105,   7,  60,  27,  50,  81,  30,   8,  47,  21,  89,  52,  89,
         73,  24,  88,  62,  69,  16,  33,  86,  83,  90,  43,  19,   2,   0,
         83,  40,  46,  17,  72,  18,  70, 105,  16,  22,  29,  91,  76,  74,
         62,   0,  59,  52,  20,  25,  48,  48,  73,  55,  30,  12,  11,  97,
          9,  60,   0,  24,  53,  17,  90,  20,  17,  52,   6,  36,  72,   4,
         17,  45,  22,  45], device='cuda:0')
pred===========================> tensor([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11], device='cuda:0')
target=============================> tensor([  6,  38,  47,  39,  86,   6,   7,   0,  25,  29,  90,  49,  16,  55,
         55,  88,  69,  87,  16,  66,  38,  57,  83,   4, 103,  51,  90,  31,
         67,  67,   2,  39,  71,  50,  40,  21,  61,  46,  56,  87,  96,   3,
         22,  16,  68,  80,  89,   2,  52,  23,  16,  13,  27,  68,  86,  77,
         45,  33,  16,  84, 103,  74,  87,   4,   7,  31,  90, 103,   1,  69,
         78,  76,  72,  70,   2,  99,   6,  47,  79,  93,  53,  40,  22,   3,
         21,   1,  16,  20,  44, 100,  75,   7,  90,  29,   2,   6,  25,  47,
         11,  59,  72,  66,  41,  23,  82,  95, 103,  92,  17,   7,  95,  42,
         34,   6,  20,  56,  78,  64,  42,   0,   6,   7,  14,  27,  98,  42,
         42,  66,  60,  29,  25,  32,   2,  89,  66,  18,  28,  57, 105,   7,
         40,  90,  98,  70,  70,  16,  95,  44,  50,  39,  98,   8,  59,   6,
        103,  52, 100,  80,  55,   8,  49,  73,  24,  98,  46,   6,  47,  49,
        101,  58,  65,   3,  17,  53, 105,  25,  88,  87, 105,   6,  27,   6,
         79,   6,  49,  76,  14,   1,   0,  69,  16,  27,  57,   1,   6,  95,
         54,  47,   7,  43,  24,  67,  39,  14,   7,  22,  25, 105,  16,  74,
         59,   7,  57,  85,  96, 103,  27,  53, 100, 101,  41,  69,   0,   5,
         75,  98,  64,  99,  49,  54,  28,  42,  74,  34,  89,  45, 105,  55,
        104,  90,   7,  36,  39,  20,  91,  32, 106,  32, 105,  29,  46,  31,
